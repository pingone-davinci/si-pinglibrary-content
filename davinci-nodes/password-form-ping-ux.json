{
  "clonedNodes": [
    {
      "data": {
        "id": "pu1avhqzrn",
        "nodeType": "CONNECTION",
        "connectionId": "867ed4363b2bc21c860085ad2baa817d",
        "connectorId": "httpConnector",
        "name": "Http",
        "label": "Http",
        "status": "configured",
        "capabilityName": "customHTMLTemplate",
        "type": "trigger",
        "properties": {
          "customHTML": {
            "value": "<div class=\"end-user-nano\">\n  <div\n    class=\"bg-light d-flex flex-column justify-content-center align-items-center position-absolute top-0 start-0 bottom-0 end-0 overflow-auto\">\n    <div style=\"max-width: 400px; min-width: 400px; width: 100%\">\n      <div class=\"card shadow mb-5\">\n        <main aria-labelledby=\"title\">\n          <div class=\"card-body p-5 d-flex flex-column\">\n            <img class=\"companyLogo align-self-center mb-5\" src=\"{{global.variables.companyLogo}}\" alt=\"{{global.variables.companyName}}\">\n\n            {{#if title}}\n            <h1 id=\"title\" class=\"text-center mb-4\">{{title}}</h1>\n            {{/if}}\n\n            {{#if textOne}}\n            <p class=\"text-muted text-center\">{{textOne}}</p>\n            {{/if}}\n\n            {{#if textTwo}}\n            <p class=\"text-muted text-center\">{{textTwo}}</p>\n            {{/if}}\n\n            <!-- Generic Error Message -->\n            <p class=\"text-danger mdi mdi-alert-circle text-center\" id=\"feedbackError\" data-id=\"feedback\"\n              data-skcomponent=\"skerror\" aria-live=\"assertive\"></p>\n\n            <!-- Field Validation Error Messages -->\n            \n            <p class=\"text-danger mdi mdi-alert-circle text-center\" id=\"passwordError\" data-skerrorid=\"password\"\n              data-skcomponent=\"skerrormessage\" aria-live=\"assertive\"></p>\n\n            <form id=\"passwordForm\" aria-labelledby=\"title\" data-id=\"passwordForm\">\n              \n              <div id=\"passwordDiv\" class=\"mb-4 form-floating\">\n                <input class=\"form-control\" type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"\n                  autocomplete=\"current-password\" value=\"\" data-id=\"password-input\" aria-required=\"true\"\n                  aria-describedby=\"passwordLabel\" />\n                <label id=\"passwordLabel\" for=\"password\">Password</label>\n              </div>\n              <div class=\"d-flex flex-column\">\n                {{#if continueButtonLabel}}\n                <button data-id=\"button\" type=\"submit\" class=\"btn btn-primary mb-3\" data-skcomponent=\"skbutton\"\n                  data-skbuttontype=\"form-submit\" id=\"btnContinue\" data-skform=\"passwordForm\"\n                  data-skbuttonvalue=\"CONTINUE\">\n                  {{continueButtonLabel}}\n                </button>\n                {{/if}}\n\n                {{#if backButtonLabel}}\n                <button data-id=\"button\" class=\"btn btn-link\" data-skcomponent=\"skbutton\" data-skbuttontype=\"next-event\"\n                  id=\"btnBack\" data-skbuttonvalue=\"BACK\">\n                  {{backButtonLabel}}\n                </button>\n                {{/if}}\n\n                {{#if forgotButtonLabel}}\n                <button data-id=\"button\" class=\"btn btn-link\" data-skcomponent=\"skbutton\" data-skbuttontype=\"next-event\"\n                  id=\"btnForgot\" data-skbuttonvalue=\"TROUBLE\">\n                  {{forgotButtonLabel}}\n                </button>\n                {{/if}}\n              </div>\n            </form>\n          </div>\n        </main>\n      </div>\n    </div>\n  </div>\n</div>\n"
          },
          "formFieldsList": {
            "value": [
              {
                "propertyName": "password",
                "preferredControlType": "textField",
                "preferredDataType": "string",
                "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"\"\n      }\n    ]\n  }\n]",
                "hashedVisibility": true,
                "displayName": "Password"
              },
              {
                "preferredControlType": "textField",
                "preferredDataType": "string",
                "propertyName": "buttonValue"
              }
            ]
          },
          "nodeTitle": {
            "value": "Password Form"
          },
          "customCSS": {
            "value": ""
          },
          "validationRules": {
            "value": [
              {
                "propertyName": "password",
                "rules": [
                  {
                    "ruleName": "presence",
                    "message": "Enter your password"
                  }
                ]
              }
            ]
          },
          "backgroundColor": {
            "value": "#afd5ffff"
          },
          "customScript": {
            "value": "/**\n * Sets focus to the DOM element specified by its ID.\n * @param {string} id - The ID of the DOM element to focus.\n */\nconst setFieldFocus = (id) => {\n    const element = document.getElementById(id);\n    if (element) {\n        element.focus();\n    } else {\n        console.log(`Element with ID ${id} not found.`);\n    }\n};\n\n/**\n * Creates a toggle button to show or hide the password input field.\n * This function assumes there's an input field within the specified container.\n * \n * @param {string} id - The ID of the container element that includes the password input.\n */\nconst makePasswordToggle = (id) => {\n    const container = document.getElementById(id);\n    if (container) {\n        const password = container.getElementsByTagName(\"input\")[0];\n        const toggler = document.createElement(\"button\");\n        toggler.setAttribute(\"type\", \"button\");\n        toggler.setAttribute(\"aria-label\", \"Show/Hide Password\");\n        toggler.className = \"btn mdi mdi-eye-off-outline position-absolute end-0 top-50 translate-middle-y\";\n        container.appendChild(toggler);\n\n        /**\n         * Toggles the visibility of the password input field between 'text' and 'password' types,\n         * updates the toggler button's icon, and refocuses on the password field.\n         */\n        const showHidePassword = () => {\n            if (password.type === \"password\") {\n                password.type = \"text\";\n                toggler.classList.add(\"mdi-eye-outline\");\n                toggler.classList.remove(\"mdi-eye-off-outline\");\n            } else {\n                password.type = \"password\";\n                toggler.classList.add(\"mdi-eye-off-outline\");\n                toggler.classList.remove(\"mdi-eye-outline\");\n            }\n            password.focus();\n        };\n\n        toggler.addEventListener(\"click\", showHidePassword);\n    }\n};\n\n/**\n * Initializes the application, specifically setting up password visibility toggling.\n * This should be called when the DOM is fully loaded.\n */\nconst start = () => {\n    makePasswordToggle(\"passwordDiv\");\n    setFieldFocus(\"password\");\n};\n\n// Add event listener to ensure the script runs after the DOM is fully loaded\nif (document.readyState === \"loading\") {\n    document.addEventListener(\"DOMContentLoaded\", start);\n} else {\n    start();\n}\n\n"
          },
          "inputSchema": {
            "value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"displayName\": \"Title\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    },\n    \"textOne\": {\n      \"type\": \"string\",\n      \"displayName\": \"Text One\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    },\n    \"textTwo\": {\n      \"type\": \"string\",\n      \"displayName\": \"Text Two\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    },\n    \"continueButtonLabel\": {\n      \"type\": \"string\",\n      \"displayName\": \"Continue Button Label\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    },\n    \"backButtonLabel\": {\n      \"type\": \"string\",\n      \"displayName\": \"Back Button Label\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    },\n    \"forgotButtonLabel\": {\n      \"type\": \"string\",\n      \"displayName\": \"Forgot Password Button Label\",\n      \"preferredControlType\": \"textField\",\n      \"enableParameters\": true\n    }\n  }\n}"
          },
          "outputSchema": {
            "value": {}
          },
          "title": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"Enter Your Password\"\n      }\n    ]\n  }\n]"
          },
          "nodeDescription": {
            "value": "Prompt for password"
          },
          "buttonLabel": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"Continue\"\n      }\n    ]\n  }\n]"
          },
          "continueButtonLabel": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"Sign On\"\n      }\n    ]\n  }\n]"
          },
          "backButtonLabel": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"Back\"\n      }\n    ]\n  }\n]"
          },
          "forgotButtonLabel": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"Having trouble signing on?\"\n      }\n    ]\n  }\n]"
          }
        }
      },
      "position": {
        "x": 690,
        "y": 420
      },
      "group": "nodes",
      "removed": false,
      "selected": false,
      "selectable": true,
      "locked": false,
      "grabbable": true,
      "pannable": false,
      "classes": ""
    },
    {
      "data": {
        "id": "2pj3ynqpx6",
        "nodeType": "EVAL"
      },
      "position": {
        "x": 810,
        "y": 420
      },
      "group": "nodes",
      "removed": false,
      "selected": false,
      "selectable": true,
      "locked": false,
      "grabbable": true,
      "pannable": false,
      "classes": ""
    },
    {
      "data": {
        "id": "urssefgj9r",
        "nodeType": "CONNECTION",
        "connectionId": "de650ca45593b82c49064ead10b9fe17",
        "connectorId": "functionsConnector",
        "name": "Functions",
        "label": "Functions",
        "status": "configured",
        "capabilityName": "AEqualsMultipleB",
        "type": "trigger",
        "properties": {
          "leftValueA": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"\"\n      },\n      {\n        \"text\": \"\"\n      },\n      {\n        \"type\": \"link\",\n        \"src\": \"http.svg\",\n        \"url\": \"buttonValue\",\n        \"data\": \"{{local.pu1avhqzrn.payload.output.buttonValue}}\",\n        \"tooltip\": \"{{local.pu1avhqzrn.payload.output.buttonValue}}\",\n        \"children\": [\n          {\n            \"text\": \"buttonValue\"\n          }\n        ]\n      },\n      {\n        \"text\": \"\"\n      }\n    ]\n  }\n]"
          },
          "rightValueB": {
            "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"submit\"\n      }\n    ]\n  }\n]"
          },
          "nodeTitle": {
            "value": "Password Form Button Action"
          },
          "rightValueMultiple": {
            "value": [
              {
                "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"CONTINUE\"\n      },\n      {\n        \"text\": \"\"\n      }\n    ]\n  }\n]",
                "id": "vgii63uk2p"
              },
              {
                "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"\"\n      },\n      {\n        \"text\": \"BACK\"\n      }\n    ]\n  }\n]",
                "id": "js0k5824y5"
              },
              {
                "value": "[\n  {\n    \"children\": [\n      {\n        \"text\": \"\"\n      },\n      {\n        \"text\": \"TROUBLE\"\n      }\n    ]\n  }\n]",
                "id": "qtli5t2v0s"
              }
            ]
          },
          "nodeDescription": {
            "value": "Check which button was clicked"
          }
        },
        "isDisabled": false
      },
      "position": {
        "x": 990,
        "y": 420
      },
      "group": "nodes",
      "removed": false,
      "selected": false,
      "selectable": true,
      "locked": false,
      "grabbable": true,
      "pannable": false,
      "classes": ""
    }
  ],
  "clonedEdges": [
    {
      "data": {
        "id": "r16qmv07mo",
        "source": "pu1avhqzrn",
        "target": "2pj3ynqpx6"
      },
      "position": {
        "x": 0,
        "y": 0
      },
      "group": "edges",
      "removed": false,
      "selected": false,
      "selectable": true,
      "locked": false,
      "grabbable": true,
      "pannable": true,
      "classes": ""
    },
    {
      "data": {
        "id": "e9aznbuguo",
        "source": "2pj3ynqpx6",
        "target": "urssefgj9r"
      },
      "position": {
        "x": 0,
        "y": 0
      },
      "group": "edges",
      "removed": false,
      "selected": false,
      "selectable": true,
      "locked": false,
      "grabbable": true,
      "pannable": true,
      "classes": ""
    }
  ]
}
{
  "meta": {
    "origin": "",
    "exportedBy": "",
    "exportDate": "",
    "exportTool": "platform-admin ui tree export",
    "exportToolVersion": "1.0",
    "treesSelectedForExport": [
      "Threat Detection Journey with PingOne Protect"
    ],
    "innerTreesIncluded": [
      "Combined OATH And PUSH MFA Methods Registration - Inner Journey",
      "Push MFA Method Registration - Inner Journey",
      "OATH Registration - Inner Journey",
      "WebAuthn MFA Method Registration - Inner Journey",
      "Threat Detection - Inner Journey",
      "MFA Device Registration - Inner Journey",
      "MFA Authentication - Inner Journey"
    ]
  },
  "trees": {
    "WebAuthn MFA Method Registration - Inner Journey": {
      "tree": {
        "_id": "WebAuthn MFA Method Registration - Inner Journey",
        "_rev": "-1191082276",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "013cc725-bb56-45a1-b2bc-b191348c5599",
        "innerTreeOnly": true,
        "nodes": {
          "013cc725-bb56-45a1-b2bc-b191348c5599": {
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "failure": "e301438c-0bd0-429c-ab0c-66126501069a",
              "success": "ec637ab4-4918-4b9b-82de-8da9ebd3c8ac",
              "unsupported": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "displayName": "WebAuthn Registration Node",
            "nodeType": "WebAuthnRegistrationNode",
            "x": 249,
            "y": 210.015625
          },
          "ec637ab4-4918-4b9b-82de-8da9ebd3c8ac": {
            "connections": {
              "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Recovery Code Display Node",
            "nodeType": "RecoveryCodeDisplayNode",
            "x": 251,
            "y": 79.015625
          }
        },
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 817,
            "y": 82
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 814,
            "y": 291
          },
          "startNode": {
            "x": 50,
            "y": 250
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "013cc725-bb56-45a1-b2bc-b191348c5599": {
          "_id": "013cc725-bb56-45a1-b2bc-b191348c5599",
          "_rev": "-1309612595",
          "trustStoreAlias": "trustalias",
          "relyingPartyName": "ForgeRock",
          "maxSavedDevices": 0,
          "generateRecoveryCodes": true,
          "storeAttestationDataInTransientState": false,
          "origins": [],
          "userVerificationRequirement": "PREFERRED",
          "postponeDeviceProfileStorage": false,
          "excludeCredentials": false,
          "requiresResidentKey": false,
          "authenticatorAttachment": "UNSPECIFIED",
          "asScript": true,
          "acceptedSigningAlgorithms": [
            "ES256",
            "RS256"
          ],
          "attestationPreference": "NONE",
          "enforceRevocationCheck": false,
          "timeout": 60,
          "_type": {
            "_id": "WebAuthnRegistrationNode",
            "name": "WebAuthn Registration Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "unsupported",
              "displayName": "Unsupported"
            },
            {
              "id": "success",
              "displayName": "Success"
            },
            {
              "id": "failure",
              "displayName": "Failure"
            },
            {
              "id": "error",
              "displayName": "Client Error"
            }
          ]
        },
        "ec637ab4-4918-4b9b-82de-8da9ebd3c8ac": {
          "_id": "ec637ab4-4918-4b9b-82de-8da9ebd3c8ac",
          "_rev": "-1498191545",
          "_type": {
            "_id": "RecoveryCodeDisplayNode",
            "name": "Recovery Code Display Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "innerNodes": {},
      "scripts": {},
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "OATH Registration - Inner Journey": {
      "tree": {
        "_id": "OATH Registration - Inner Journey",
        "_rev": "1471899699",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "a74fc86b-bef3-45b7-aa64-21342feb6d0f",
        "innerTreeOnly": true,
        "nodes": {
          "1cd6339e-9ce1-4142-9324-5108071cb283": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "a74fc86b-bef3-45b7-aa64-21342feb6d0f"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 577,
            "y": 739.015625
          },
          "20e5f0b6-3a9d-4d37-8860-f9b54e405a64": {
            "connections": {
              "true": "7a7570f1-fafa-4024-816b-143e14a84eca"
            },
            "displayName": "Set Invalid Code Error Message",
            "nodeType": "ScriptedDecisionNode",
            "x": 874,
            "y": 282.015625
          },
          "2b07661f-4488-4a81-a06c-260f3bba12fd": {
            "connections": {
              "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "successOutcome": "b93bfdc3-8784-4404-bf5a-3405e007f51c"
            },
            "displayName": "OATH Registration",
            "nodeType": "OathRegistrationNode",
            "x": 569,
            "y": 222.015625
          },
          "5919080a-42ec-4caa-a72b-379928f64287": {
            "connections": {
              "true": "a249211b-b737-4af5-9043-a741b0337be5"
            },
            "displayName": "Set Invalid Code Error Message",
            "nodeType": "ScriptedDecisionNode",
            "x": 879,
            "y": 418.015625
          },
          "7a7570f1-fafa-4024-816b-143e14a84eca": {
            "connections": {
              "failureOutcome": "a6b19d5f-a886-4c16-b73e-b1732bcabd9c",
              "notRegisteredOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Collect Verification Code",
            "nodeType": "PageNode",
            "x": 909,
            "y": 0
          },
          "9bd179e2-fff2-4c6e-a185-6e6a601c4ee5": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "5919080a-42ec-4caa-a72b-379928f64287"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 908,
            "y": 536.015625
          },
          "a249211b-b737-4af5-9043-a741b0337be5": {
            "connections": {
              "false": "9bd179e2-fff2-4c6e-a185-6e6a601c4ee5",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Collect Recovery Code",
            "nodeType": "PageNode",
            "x": 909,
            "y": 704.015625
          },
          "a6b19d5f-a886-4c16-b73e-b1732bcabd9c": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "20e5f0b6-3a9d-4d37-8860-f9b54e405a64"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 1246,
            "y": 85.015625
          },
          "a74fc86b-bef3-45b7-aa64-21342feb6d0f": {
            "connections": {
              "failureOutcome": "1cd6339e-9ce1-4142-9324-5108071cb283",
              "notRegisteredOutcome": "b2f273ed-d2ca-470f-9d76-f3b7abab21dd",
              "recoveryCodeOutcome": "a249211b-b737-4af5-9043-a741b0337be5",
              "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "OATH Token Verifier",
            "nodeType": "OathTokenVerifierNode",
            "x": 568,
            "y": 482.015625
          },
          "b2f273ed-d2ca-470f-9d76-f3b7abab21dd": {
            "connections": {
              "outcome": "2b07661f-4488-4a81-a06c-260f3bba12fd"
            },
            "displayName": "Get Authenticator App",
            "nodeType": "GetAuthenticatorAppNode",
            "x": 560.5714285714286,
            "y": 374.59375
          },
          "b93bfdc3-8784-4404-bf5a-3405e007f51c": {
            "connections": {
              "outcome": "7a7570f1-fafa-4024-816b-143e14a84eca"
            },
            "displayName": "Recovery Code Display Node",
            "nodeType": "RecoveryCodeDisplayNode",
            "x": 537,
            "y": 81.015625
          }
        },
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 1908,
            "y": 504
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 1910,
            "y": 801
          },
          "startNode": {
            "x": 50,
            "y": 250
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "1cd6339e-9ce1-4142-9324-5108071cb283": {
          "_id": "1cd6339e-9ce1-4142-9324-5108071cb283",
          "_rev": "-988469540",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "20e5f0b6-3a9d-4d37-8860-f9b54e405a64": {
          "_id": "20e5f0b6-3a9d-4d37-8860-f9b54e405a64",
          "_rev": "-1396591400",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "2b07661f-4488-4a81-a06c-260f3bba12fd": {
          "_id": "2b07661f-4488-4a81-a06c-260f3bba12fd",
          "_rev": "-921343997",
          "addChecksum": false,
          "bgColor": "032b75",
          "generateRecoveryCodes": true,
          "truncationOffset": -1,
          "algorithm": "TOTP",
          "postponeDeviceProfileStorage": false,
          "passwordLength": "SIX_DIGITS",
          "totpTimeInterval": 30,
          "scanQRCodeMessage": {},
          "accountName": "USERNAME",
          "issuer": "ForgeRock",
          "minSharedSecretLength": 32,
          "totpHashAlgorithm": "HMAC_SHA1",
          "_type": {
            "_id": "OathRegistrationNode",
            "name": "OATH Registration",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            }
          ]
        },
        "5919080a-42ec-4caa-a72b-379928f64287": {
          "_id": "5919080a-42ec-4caa-a72b-379928f64287",
          "_rev": "1460597691",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "7a7570f1-fafa-4024-816b-143e14a84eca": {
          "_id": "7a7570f1-fafa-4024-816b-143e14a84eca",
          "_rev": "-1662416330",
          "nodes": [
            {
              "_id": "9604474b-479d-45bf-b77c-c2ee15fafb1b",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Verification Code"
            },
            {
              "_id": "b675f4d8-a659-4a0f-8e6d-5821270669d4",
              "nodeType": "OathTokenVerifierNode",
              "displayName": "OATH Token Verifier"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Verification Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            }
          ]
        },
        "9bd179e2-fff2-4c6e-a185-6e6a601c4ee5": {
          "_id": "9bd179e2-fff2-4c6e-a185-6e6a601c4ee5",
          "_rev": "1932415020",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "a249211b-b737-4af5-9043-a741b0337be5": {
          "_id": "a249211b-b737-4af5-9043-a741b0337be5",
          "_rev": "-1094542241",
          "nodes": [
            {
              "_id": "32777409-ca77-46e9-8c63-b58e89685fbd",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "329bad80-6cd4-413d-9879-4b3a0d424a99",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "a6b19d5f-a886-4c16-b73e-b1732bcabd9c": {
          "_id": "a6b19d5f-a886-4c16-b73e-b1732bcabd9c",
          "_rev": "1633372360",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "a74fc86b-bef3-45b7-aa64-21342feb6d0f": {
          "_id": "a74fc86b-bef3-45b7-aa64-21342feb6d0f",
          "_rev": "1339179761",
          "totpTimeInterval": 30,
          "maximumAllowedClockDrift": 5,
          "totpTimeSteps": 2,
          "totpHashAlgorithm": "HMAC_SHA1",
          "isRecoveryCodeAllowed": true,
          "algorithm": "TOTP",
          "hotpWindowSize": 100,
          "_type": {
            "_id": "OathTokenVerifierNode",
            "name": "OATH Token Verifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            },
            {
              "id": "recoveryCodeOutcome",
              "displayName": "Recovery Code"
            }
          ]
        },
        "b2f273ed-d2ca-470f-9d76-f3b7abab21dd": {
          "_id": "b2f273ed-d2ca-470f-9d76-f3b7abab21dd",
          "_rev": "1254970787",
          "continueLabel": {},
          "message": {},
          "googleLink": "https://play.google.com/store/apps/details?id=com.forgerock.authenticator",
          "appleLink": "https://itunes.apple.com/app/forgerock-authenticator/id1038442926",
          "_type": {
            "_id": "GetAuthenticatorAppNode",
            "name": "Get Authenticator App",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "b93bfdc3-8784-4404-bf5a-3405e007f51c": {
          "_id": "b93bfdc3-8784-4404-bf5a-3405e007f51c",
          "_rev": "1265789743",
          "_type": {
            "_id": "RecoveryCodeDisplayNode",
            "name": "Recovery Code Display Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "innerNodes": {
        "9604474b-479d-45bf-b77c-c2ee15fafb1b": {
          "_id": "9604474b-479d-45bf-b77c-c2ee15fafb1b",
          "_rev": "1798175675",
          "script": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "b675f4d8-a659-4a0f-8e6d-5821270669d4": {
          "_id": "b675f4d8-a659-4a0f-8e6d-5821270669d4",
          "_rev": "-510639454",
          "totpTimeInterval": 30,
          "maximumAllowedClockDrift": 5,
          "totpTimeSteps": 2,
          "totpHashAlgorithm": "HMAC_SHA1",
          "isRecoveryCodeAllowed": false,
          "algorithm": "TOTP",
          "hotpWindowSize": 100,
          "_type": {
            "_id": "OathTokenVerifierNode",
            "name": "OATH Token Verifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            }
          ]
        },
        "32777409-ca77-46e9-8c63-b58e89685fbd": {
          "_id": "32777409-ca77-46e9-8c63-b58e89685fbd",
          "_rev": "98975759",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "329bad80-6cd4-413d-9879-4b3a0d424a99": {
          "_id": "329bad80-6cd4-413d-9879-4b3a0d424a99",
          "_rev": "138837683",
          "recoveryCodeType": "OATH",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        }
      },
      "scripts": {
        "d7533919-235c-4548-99db-dd9cb33344ae": {
          "_id": "d7533919-235c-4548-99db-dd9cb33344ae",
          "name": "Threat Detection - Set Invalid code error message",
          "description": "Script to set invalid code error message",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"invalidCodeErrorMessage\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Set the below error message in shared state, can be displayed on the last UI Node\\n\\ntry {\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"Invalid Code\\\");\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "87cc8351-0d8c-4879-acee-6ddc72b29edc": {
          "_id": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "name": "Threat Detection - Validate verification code",
          "description": "Script to validate verification code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n*/\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    // Validate the verification code \\\\n\\\\\\n                    function validateCode() { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode) { \\\\n\\\\\\n                            // Set input properties to prevent user tampering \\\\n\\\\\\n                            verificationCode.setAttribute('maxlength', '6'); \\\\n\\\\\\n                            verificationCode.setAttribute('pattern', '[0-9]{6}'); \\\\n\\\\\\n                            verificationCode.setAttribute('inputmode', 'numeric'); \\\\n\\\\\\n                            // Check if the input is exactly 6 digits long and numeric \\\\n\\\\\\n                            const isValidCode = /^[0-9]{6}$/.test(verificationCode.value); \\\\n\\\\\\n                            submitBtn.disabled = !isValidCode; \\\\n\\\\\\n                            return isValidCode; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        return false; \\\\n\\\\\\n                    }; \\\\n\\\\\\n                    \\\\n\\\\\\n                    function preventEnterKeyDefault(event) { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (event.key === 'Enter' && !validateCode()) { \\\\n\\\\\\n                            event.preventDefault(); \\\\n\\\\\\n                            if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        // Auto-submit and go to 'Not Registered' path if method is not registered for the user, in that case it is assumed that button will be of type submit from Page Node \\\\n\\\\\\n                        const nextBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (nextBtn) { \\\\n\\\\\\n                            nextBtn.style.visibility='hidden'; \\\\n\\\\\\n                            nextBtn.click(); \\\\n\\\\\\n                        } \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode && submitBtn) { \\\\n\\\\\\n                            verificationCode.addEventListener('input', validateCode); \\\\n\\\\\\n                            verificationCode.addEventListener('keypress', preventEnterKeyDefault); \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                if (!validateCode()) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    // If both elements are present, initialize validation \\\\n\\\\\\n                    if (document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0] && document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                    else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                    } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {\\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0": {
          "_id": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "name": "Threat Detection - Validate Recovery Code input",
          "description": "Script to validate Recovery code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"// /*\\n//   - Data made available by nodes that have already executed are available in the sharedState variable.\\n//   - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n//  */\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const recoveryCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (recoveryCode && submitBtn) { \\\\n\\\\\\n                            // Set the maxlength attribute to 10 \\\\n\\\\\\n                            recoveryCode.setAttribute('maxlength', 10); \\\\n\\\\\\n                            const enableSubmitBtn = () => { \\\\n\\\\\\n                                // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }; \\\\n\\\\\\n                            // Revalidate before form submission \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (!isValidInput) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            recoveryCode.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                       } \\\\n\\\\\\n                      } \\\\n\\\\\\n                      if (document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                      else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                      } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "Push MFA Method Registration - Inner Journey": {
      "tree": {
        "_id": "Push MFA Method Registration - Inner Journey",
        "_rev": "1056631054",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "d6ba5460-9fc5-4b2c-9b3d-96b6ab9e407a",
        "innerTreeOnly": true,
        "nodes": {
          "1983a15a-f57e-4b4e-85c1-62c29e816132": {
            "connections": {
              "DONE": "1f583b80-7382-4903-8c29-2424b30e9565",
              "EXITED": "bfb6314c-da25-45fb-ac97-1746de12b0f8"
            },
            "displayName": "Push Wait Node",
            "nodeType": "PushWaitNode",
            "x": 377,
            "y": 107.015625
          },
          "1f583b80-7382-4903-8c29-2424b30e9565": {
            "connections": {
              "EXPIRED": "3684dc73-660a-406d-b461-706f5e6190cc",
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "WAITING": "1983a15a-f57e-4b4e-85c1-62c29e816132"
            },
            "displayName": "Push Result Verifier Node",
            "nodeType": "PushResultVerifierNode",
            "x": 788,
            "y": 93.015625
          },
          "3684dc73-660a-406d-b461-706f5e6190cc": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "d6ba5460-9fc5-4b2c-9b3d-96b6ab9e407a"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 805,
            "y": 324
          },
          "4b13cd20-4e83-4bb0-b1c2-8a91a0f7c928": {
            "connections": {
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "NOT_REGISTERED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "SENT": "8b2b3bdd-4c26-4622-846b-fc2249d13729"
            },
            "displayName": "Push Sender",
            "nodeType": "PushAuthenticationSenderNode",
            "x": 380,
            "y": 1173.015625
          },
          "749b200c-a4ee-4bd0-8ad2-95dcde313076": {
            "connections": {
              "EXPIRED": "c62acbca-819b-48e7-8c46-4102e605549d",
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "WAITING": "8b2b3bdd-4c26-4622-846b-fc2249d13729"
            },
            "displayName": "Push Result Verifier Node",
            "nodeType": "PushResultVerifierNode",
            "x": 803.3333333333335,
            "y": 1346.359375
          },
          "75568f3a-e111-4b0f-b028-7ba08238cf7f": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "fdb173c0-5152-481f-abb3-4407b815c1e4"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 815,
            "y": 769.015625
          },
          "8b2b3bdd-4c26-4622-846b-fc2249d13729": {
            "connections": {
              "DONE": "749b200c-a4ee-4bd0-8ad2-95dcde313076",
              "EXITED": "c62acbca-819b-48e7-8c46-4102e605549d"
            },
            "displayName": "Push Wait Node",
            "nodeType": "PushWaitNode",
            "x": 387,
            "y": 1386.015625
          },
          "8dbd8cc0-d9ab-4ce8-978a-35c2cd0b228a": {
            "connections": {
              "outcome": "4b13cd20-4e83-4bb0-b1c2-8a91a0f7c928"
            },
            "displayName": "Recovery Code Display Node",
            "nodeType": "RecoveryCodeDisplayNode",
            "x": 352,
            "y": 996.015625
          },
          "bfb6314c-da25-45fb-ac97-1746de12b0f8": {
            "connections": {
              "false": "75568f3a-e111-4b0f-b028-7ba08238cf7f",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Collect Recovery Code",
            "nodeType": "PageNode",
            "x": 815,
            "y": 473.015625
          },
          "c62acbca-819b-48e7-8c46-4102e605549d": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "4b13cd20-4e83-4bb0-b1c2-8a91a0f7c928"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 827,
            "y": 1167.515625
          },
          "d6ba5460-9fc5-4b2c-9b3d-96b6ab9e407a": {
            "connections": {
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "NOT_REGISTERED": "da49ca6e-71a7-4a9e-abc9-bf503313825c",
              "SENT": "1983a15a-f57e-4b4e-85c1-62c29e816132"
            },
            "displayName": "Push Sender",
            "nodeType": "PushAuthenticationSenderNode",
            "x": 374,
            "y": 316.015625
          },
          "da49ca6e-71a7-4a9e-abc9-bf503313825c": {
            "connections": {
              "outcome": "f37214d7-9c0a-4c6e-bda9-ab11cdef0f55"
            },
            "displayName": "Get Authenticator App",
            "nodeType": "GetAuthenticatorAppNode",
            "x": 360,
            "y": 592.015625
          },
          "f37214d7-9c0a-4c6e-bda9-ab11cdef0f55": {
            "connections": {
              "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "successOutcome": "8dbd8cc0-d9ab-4ce8-978a-35c2cd0b228a",
              "timeoutOutcome": "da49ca6e-71a7-4a9e-abc9-bf503313825c"
            },
            "displayName": "Push Registration",
            "nodeType": "PushRegistrationNode",
            "x": 378,
            "y": 780.015625
          },
          "fdb173c0-5152-481f-abb3-4407b815c1e4": {
            "connections": {
              "true": "bfb6314c-da25-45fb-ac97-1746de12b0f8"
            },
            "displayName": "Set Invalid Code Error Message",
            "nodeType": "ScriptedDecisionNode",
            "x": 780,
            "y": 997.015625
          }
        },
        "description": "A login journey with MFA using push notifications. This is for the implementation guide.",
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 1275,
            "y": 117
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 1173,
            "y": 846
          },
          "startNode": {
            "x": 50,
            "y": 250
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "1983a15a-f57e-4b4e-85c1-62c29e816132": {
          "_id": "1983a15a-f57e-4b4e-85c1-62c29e816132",
          "_rev": "-1840573713",
          "challengeMessage": {},
          "exitMessage": {},
          "waitingMessage": {},
          "secondsToWait": 5,
          "_type": {
            "_id": "PushWaitNode",
            "name": "Push Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            },
            {
              "id": "EXITED",
              "displayName": "Exit"
            }
          ]
        },
        "1f583b80-7382-4903-8c29-2424b30e9565": {
          "_id": "1f583b80-7382-4903-8c29-2424b30e9565",
          "_rev": "-1725299275",
          "_type": {
            "_id": "PushResultVerifierNode",
            "name": "Push Result Verifier Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "Success"
            },
            {
              "id": "FALSE",
              "displayName": "Failure"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            },
            {
              "id": "WAITING",
              "displayName": "Waiting"
            }
          ]
        },
        "3684dc73-660a-406d-b461-706f5e6190cc": {
          "_id": "3684dc73-660a-406d-b461-706f5e6190cc",
          "_rev": "-856856340",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "4b13cd20-4e83-4bb0-b1c2-8a91a0f7c928": {
          "_id": "4b13cd20-4e83-4bb0-b1c2-8a91a0f7c928",
          "_rev": "417700094",
          "captureFailure": true,
          "contextInfo": false,
          "userMessage": {},
          "pushType": "DEFAULT",
          "customPayload": [],
          "mandatory": true,
          "messageTimeout": 120000,
          "_type": {
            "_id": "PushAuthenticationSenderNode",
            "name": "Push Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "SENT",
              "displayName": "Sent"
            },
            {
              "id": "NOT_REGISTERED",
              "displayName": "Not Registered"
            },
            {
              "id": "FAILURE",
              "displayName": "Failure"
            }
          ]
        },
        "749b200c-a4ee-4bd0-8ad2-95dcde313076": {
          "_id": "749b200c-a4ee-4bd0-8ad2-95dcde313076",
          "_rev": "1840150878",
          "_type": {
            "_id": "PushResultVerifierNode",
            "name": "Push Result Verifier Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "Success"
            },
            {
              "id": "FALSE",
              "displayName": "Failure"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            },
            {
              "id": "WAITING",
              "displayName": "Waiting"
            }
          ]
        },
        "75568f3a-e111-4b0f-b028-7ba08238cf7f": {
          "_id": "75568f3a-e111-4b0f-b028-7ba08238cf7f",
          "_rev": "-562483695",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "8b2b3bdd-4c26-4622-846b-fc2249d13729": {
          "_id": "8b2b3bdd-4c26-4622-846b-fc2249d13729",
          "_rev": "1225770053",
          "challengeMessage": {},
          "exitMessage": {},
          "waitingMessage": {},
          "secondsToWait": 5,
          "_type": {
            "_id": "PushWaitNode",
            "name": "Push Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            },
            {
              "id": "EXITED",
              "displayName": "Exit"
            }
          ]
        },
        "8dbd8cc0-d9ab-4ce8-978a-35c2cd0b228a": {
          "_id": "8dbd8cc0-d9ab-4ce8-978a-35c2cd0b228a",
          "_rev": "-1543928075",
          "_type": {
            "_id": "RecoveryCodeDisplayNode",
            "name": "Recovery Code Display Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "bfb6314c-da25-45fb-ac97-1746de12b0f8": {
          "_id": "bfb6314c-da25-45fb-ac97-1746de12b0f8",
          "_rev": "811438661",
          "nodes": [
            {
              "_id": "6ee1dce2-9e16-46f2-82e9-1e7a961c46d5",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "bdcc8ed0-da62-4580-8706-7dcaf2042250",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "c62acbca-819b-48e7-8c46-4102e605549d": {
          "_id": "c62acbca-819b-48e7-8c46-4102e605549d",
          "_rev": "1227831232",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "d6ba5460-9fc5-4b2c-9b3d-96b6ab9e407a": {
          "_id": "d6ba5460-9fc5-4b2c-9b3d-96b6ab9e407a",
          "_rev": "-1748464824",
          "captureFailure": true,
          "contextInfo": false,
          "userMessage": {},
          "pushType": "DEFAULT",
          "customPayload": [],
          "mandatory": true,
          "messageTimeout": 120000,
          "_type": {
            "_id": "PushAuthenticationSenderNode",
            "name": "Push Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "SENT",
              "displayName": "Sent"
            },
            {
              "id": "NOT_REGISTERED",
              "displayName": "Not Registered"
            },
            {
              "id": "FAILURE",
              "displayName": "Failure"
            }
          ]
        },
        "da49ca6e-71a7-4a9e-abc9-bf503313825c": {
          "_id": "da49ca6e-71a7-4a9e-abc9-bf503313825c",
          "_rev": "-2123903284",
          "continueLabel": {},
          "message": {},
          "googleLink": "https://play.google.com/store/apps/details?id=com.forgerock.authenticator",
          "appleLink": "https://itunes.apple.com/app/forgerock-authenticator/id1038442926",
          "_type": {
            "_id": "GetAuthenticatorAppNode",
            "name": "Get Authenticator App",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "f37214d7-9c0a-4c6e-bda9-ab11cdef0f55": {
          "_id": "f37214d7-9c0a-4c6e-bda9-ab11cdef0f55",
          "_rev": "-1572578575",
          "bgColor": "032b75",
          "generateRecoveryCodes": true,
          "scanQRCodeMessage": {},
          "accountName": "USERNAME",
          "issuer": "ForgeRock",
          "timeout": 60,
          "_type": {
            "_id": "PushRegistrationNode",
            "name": "Push Registration",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "timeoutOutcome",
              "displayName": "Time Out"
            }
          ]
        },
        "fdb173c0-5152-481f-abb3-4407b815c1e4": {
          "_id": "fdb173c0-5152-481f-abb3-4407b815c1e4",
          "_rev": "-976171168",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        }
      },
      "innerNodes": {
        "6ee1dce2-9e16-46f2-82e9-1e7a961c46d5": {
          "_id": "6ee1dce2-9e16-46f2-82e9-1e7a961c46d5",
          "_rev": "-353412754",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "bdcc8ed0-da62-4580-8706-7dcaf2042250": {
          "_id": "bdcc8ed0-da62-4580-8706-7dcaf2042250",
          "_rev": "802993793",
          "recoveryCodeType": "PUSH",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        }
      },
      "scripts": {
        "d7533919-235c-4548-99db-dd9cb33344ae": {
          "_id": "d7533919-235c-4548-99db-dd9cb33344ae",
          "name": "Threat Detection - Set Invalid code error message",
          "description": "Script to set invalid code error message",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"invalidCodeErrorMessage\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Set the below error message in shared state, can be displayed on the last UI Node\\n\\ntry {\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"Invalid Code\\\");\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0": {
          "_id": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "name": "Threat Detection - Validate Recovery Code input",
          "description": "Script to validate Recovery code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"// /*\\n//   - Data made available by nodes that have already executed are available in the sharedState variable.\\n//   - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n//  */\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const recoveryCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (recoveryCode && submitBtn) { \\\\n\\\\\\n                            // Set the maxlength attribute to 10 \\\\n\\\\\\n                            recoveryCode.setAttribute('maxlength', 10); \\\\n\\\\\\n                            const enableSubmitBtn = () => { \\\\n\\\\\\n                                // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }; \\\\n\\\\\\n                            // Revalidate before form submission \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (!isValidInput) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            recoveryCode.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                       } \\\\n\\\\\\n                      } \\\\n\\\\\\n                      if (document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                      else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                      } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "Combined OATH And PUSH MFA Methods Registration - Inner Journey": {
      "tree": {
        "_id": "Combined OATH And PUSH MFA Methods Registration - Inner Journey",
        "_rev": "-2010919222",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "949627a6-e9b1-46de-bb16-c7e91a2ecc54",
        "innerTreeOnly": true,
        "nodes": {
          "07895993-12ab-40d7-a525-ff441b14cf8a": {
            "x": 211,
            "y": 1163,
            "connections": {
              "failureOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "successOutcome": "fe4d16d8-79fc-4b66-b8b3-6071fe4943da",
              "timeoutOutcome": "2342127c-ca12-4f23-9ac4-ab0884f00b5c"
            },
            "nodeType": "CombinedMultiFactorRegistrationNode",
            "displayName": "Combined MFA Registration"
          },
          "2342127c-ca12-4f23-9ac4-ab0884f00b5c": {
            "x": 259,
            "y": 1450,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "07895993-12ab-40d7-a525-ff441b14cf8a"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "2a6921f1-3855-4f7b-9795-58d061b13d93": {
            "x": 609,
            "y": 307.015625,
            "connections": {
              "failureOutcome": "4aa24fe5-6bd4-4abf-bcbc-4522c8f66ef4",
              "notRegisteredOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "recoveryCodeOutcome": "5214aa12-ba72-472a-b0d7-cc3e0ceb3d16",
              "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Verification Code"
          },
          "31de72c6-6b95-45f7-844f-2565516e52e9": {
            "x": 940,
            "y": 104.015625,
            "connections": {
              "true": "2a6921f1-3855-4f7b-9795-58d061b13d93"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "4aa24fe5-6bd4-4abf-bcbc-4522c8f66ef4": {
            "x": 609,
            "y": 73.015625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "31de72c6-6b95-45f7-844f-2565516e52e9"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "4d93415d-2d1e-4493-8632-0bf71f267e4e": {
            "x": 596.5,
            "y": 954.1927083333334,
            "connections": {
              "DONE": "a14b3060-fea5-48e9-8e48-85de980aa488",
              "EXITED": "75207a75-7a74-4a78-baec-8b8ab5e7c95d"
            },
            "nodeType": "PushWaitNode",
            "displayName": "Push Wait Node"
          },
          "5137a446-fbe8-4207-bb9c-e1e56c845c09": {
            "x": 200,
            "y": 87,
            "connections": {
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "WAITING": "b39262dc-dbc8-42fb-aa35-1570c54fab5a",
              "EXPIRED": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "PushResultVerifierNode",
            "displayName": "Push Result Verifier Node"
          },
          "5214aa12-ba72-472a-b0d7-cc3e0ceb3d16": {
            "x": 609.1666666666667,
            "y": 638.6927083333334,
            "connections": {
              "false": "b5091cff-8203-47f8-81a5-39a428a0f55f",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Recovery Code Page Node"
          },
          "64e8bd42-5b76-4eff-a8fe-c50ffb4877bb": {
            "x": 601,
            "y": 1163.5729166666667,
            "connections": {
              "NOT_REGISTERED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "SENT": "4d93415d-2d1e-4493-8632-0bf71f267e4e"
            },
            "nodeType": "PushAuthenticationSenderNode",
            "displayName": "Push Sender"
          },
          "75207a75-7a74-4a78-baec-8b8ab5e7c95d": {
            "x": 996,
            "y": 1144.015625,
            "connections": {
              "failureOutcome": "dfa400c8-c1e7-494b-aab5-ccfae3351c29",
              "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "notRegisteredOutcome": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Verification Code"
          },
          "80185ded-8070-4254-9114-85dc3edb41be": {
            "x": 224,
            "y": 964.421875,
            "connections": {
              "outcome": "07895993-12ab-40d7-a525-ff441b14cf8a"
            },
            "nodeType": "GetAuthenticatorAppNode",
            "displayName": "Get Authenticator App"
          },
          "8759f933-0f79-4b5e-93e7-b25889a42a76": {
            "x": 1375,
            "y": 1456.015625,
            "connections": {
              "true": "75207a75-7a74-4a78-baec-8b8ab5e7c95d"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "949627a6-e9b1-46de-bb16-c7e91a2ecc54": {
            "x": 239,
            "y": 674,
            "connections": {
              "NOT_REGISTERED": "80185ded-8070-4254-9114-85dc3edb41be",
              "SENT": "b39262dc-dbc8-42fb-aa35-1570c54fab5a"
            },
            "nodeType": "PushAuthenticationSenderNode",
            "displayName": "Push Sender"
          },
          "a14b3060-fea5-48e9-8e48-85de980aa488": {
            "x": 976.5,
            "y": 934.1927083333334,
            "connections": {
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "WAITING": "4d93415d-2d1e-4493-8632-0bf71f267e4e",
              "EXPIRED": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "PushResultVerifierNode",
            "displayName": "Push Result Verifier Node"
          },
          "aebb1339-d0f2-4cc9-ad5e-1fce3dd6eecd": {
            "x": 949,
            "y": 647.015625,
            "connections": {
              "true": "5214aa12-ba72-472a-b0d7-cc3e0ceb3d16"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "b39262dc-dbc8-42fb-aa35-1570c54fab5a": {
            "x": 236,
            "y": 405,
            "connections": {
              "DONE": "5137a446-fbe8-4207-bb9c-e1e56c845c09",
              "EXITED": "2a6921f1-3855-4f7b-9795-58d061b13d93"
            },
            "nodeType": "PushWaitNode",
            "displayName": "Push Wait Node"
          },
          "b5091cff-8203-47f8-81a5-39a428a0f55f": {
            "x": 990,
            "y": 780.015625,
            "connections": {
              "Retry": "aebb1339-d0f2-4cc9-ad5e-1fce3dd6eecd",
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "dfa400c8-c1e7-494b-aab5-ccfae3351c29": {
            "x": 1018,
            "y": 1434.03125,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "8759f933-0f79-4b5e-93e7-b25889a42a76"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "fe4d16d8-79fc-4b66-b8b3-6071fe4943da": {
            "x": 575.8888888888889,
            "y": 1435.5729166666667,
            "connections": {
              "outcome": "64e8bd42-5b76-4eff-a8fe-c50ffb4877bb"
            },
            "nodeType": "RecoveryCodeDisplayNode",
            "displayName": "Recovery Code Display Node"
          }
        },
        "staticNodes": {
          "startNode": {
            "x": 70,
            "y": 347.5
          },
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 2334,
            "y": 817.3333333333333
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 2363,
            "y": 1506.6666666666667
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "07895993-12ab-40d7-a525-ff441b14cf8a": {
          "_id": "07895993-12ab-40d7-a525-ff441b14cf8a",
          "_rev": "-2005213558",
          "addChecksum": false,
          "bgColor": "032b75",
          "generateRecoveryCodes": true,
          "truncationOffset": -1,
          "algorithm": "TOTP",
          "passwordLength": "SIX_DIGITS",
          "totpTimeInterval": 30,
          "scanQRCodeMessage": {},
          "accountName": "USERNAME",
          "issuer": "ForgeRock",
          "minSharedSecretLength": 32,
          "totpHashAlgorithm": "HMAC_SHA1",
          "timeout": 60,
          "_type": {
            "_id": "CombinedMultiFactorRegistrationNode",
            "name": "Combined MFA Registration",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "timeoutOutcome",
              "displayName": "Time Out"
            }
          ]
        },
        "2342127c-ca12-4f23-9ac4-ab0884f00b5c": {
          "_id": "2342127c-ca12-4f23-9ac4-ab0884f00b5c",
          "_rev": "-1352750259",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "2a6921f1-3855-4f7b-9795-58d061b13d93": {
          "_id": "2a6921f1-3855-4f7b-9795-58d061b13d93",
          "_rev": "-2026917768",
          "nodes": [
            {
              "_id": "608dbf81-86c3-403b-afe0-3a79d34c13d1",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Verification Code"
            },
            {
              "_id": "edfd6dd2-aa20-461f-9d7a-8ac2579bc4bc",
              "nodeType": "OathTokenVerifierNode",
              "displayName": "OATH Token Verifier"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Verification Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            },
            {
              "id": "recoveryCodeOutcome",
              "displayName": "Recovery Code"
            }
          ]
        },
        "31de72c6-6b95-45f7-844f-2565516e52e9": {
          "_id": "31de72c6-6b95-45f7-844f-2565516e52e9",
          "_rev": "-2056164731",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "4aa24fe5-6bd4-4abf-bcbc-4522c8f66ef4": {
          "_id": "4aa24fe5-6bd4-4abf-bcbc-4522c8f66ef4",
          "_rev": "-1141575379",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "4d93415d-2d1e-4493-8632-0bf71f267e4e": {
          "_id": "4d93415d-2d1e-4493-8632-0bf71f267e4e",
          "_rev": "64330983",
          "challengeMessage": {},
          "exitMessage": {},
          "waitingMessage": {},
          "secondsToWait": 5,
          "_type": {
            "_id": "PushWaitNode",
            "name": "Push Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            },
            {
              "id": "EXITED",
              "displayName": "Exit"
            }
          ]
        },
        "5137a446-fbe8-4207-bb9c-e1e56c845c09": {
          "_id": "5137a446-fbe8-4207-bb9c-e1e56c845c09",
          "_rev": "-1263270562",
          "_type": {
            "_id": "PushResultVerifierNode",
            "name": "Push Result Verifier Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "Success"
            },
            {
              "id": "FALSE",
              "displayName": "Failure"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            },
            {
              "id": "WAITING",
              "displayName": "Waiting"
            }
          ]
        },
        "5214aa12-ba72-472a-b0d7-cc3e0ceb3d16": {
          "_id": "5214aa12-ba72-472a-b0d7-cc3e0ceb3d16",
          "_rev": "-425890612",
          "nodes": [
            {
              "_id": "decca9d6-6a25-4baa-bcf3-112a8c6d6b6e",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "5641ad47-ea89-4afb-b68d-8919a909bbc8",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "64e8bd42-5b76-4eff-a8fe-c50ffb4877bb": {
          "_id": "64e8bd42-5b76-4eff-a8fe-c50ffb4877bb",
          "_rev": "106725498",
          "captureFailure": false,
          "contextInfo": false,
          "userMessage": {},
          "pushType": "DEFAULT",
          "customPayload": [],
          "mandatory": true,
          "messageTimeout": 120000,
          "_type": {
            "_id": "PushAuthenticationSenderNode",
            "name": "Push Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "SENT",
              "displayName": "Sent"
            },
            {
              "id": "NOT_REGISTERED",
              "displayName": "Not Registered"
            }
          ]
        },
        "75207a75-7a74-4a78-baec-8b8ab5e7c95d": {
          "_id": "75207a75-7a74-4a78-baec-8b8ab5e7c95d",
          "_rev": "1484747849",
          "nodes": [
            {
              "_id": "17b8af5c-7dd9-4b26-9bd7-ebcea9548a97",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Verification Code"
            },
            {
              "_id": "ae96d2ce-269a-43da-a567-22c5c894c1b1",
              "nodeType": "OathTokenVerifierNode",
              "displayName": "OATH Token Verifier"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Verification Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            }
          ]
        },
        "80185ded-8070-4254-9114-85dc3edb41be": {
          "_id": "80185ded-8070-4254-9114-85dc3edb41be",
          "_rev": "1185930700",
          "continueLabel": {},
          "message": {},
          "googleLink": "https://play.google.com/store/apps/details?id=com.forgerock.authenticator",
          "appleLink": "https://itunes.apple.com/app/forgerock-authenticator/id1038442926",
          "_type": {
            "_id": "GetAuthenticatorAppNode",
            "name": "Get Authenticator App",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "8759f933-0f79-4b5e-93e7-b25889a42a76": {
          "_id": "8759f933-0f79-4b5e-93e7-b25889a42a76",
          "_rev": "-2005799865",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "949627a6-e9b1-46de-bb16-c7e91a2ecc54": {
          "_id": "949627a6-e9b1-46de-bb16-c7e91a2ecc54",
          "_rev": "2014871317",
          "captureFailure": false,
          "contextInfo": false,
          "userMessage": {},
          "pushType": "DEFAULT",
          "customPayload": [],
          "mandatory": true,
          "messageTimeout": 120000,
          "_type": {
            "_id": "PushAuthenticationSenderNode",
            "name": "Push Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "SENT",
              "displayName": "Sent"
            },
            {
              "id": "NOT_REGISTERED",
              "displayName": "Not Registered"
            }
          ]
        },
        "a14b3060-fea5-48e9-8e48-85de980aa488": {
          "_id": "a14b3060-fea5-48e9-8e48-85de980aa488",
          "_rev": "-61013113",
          "_type": {
            "_id": "PushResultVerifierNode",
            "name": "Push Result Verifier Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "Success"
            },
            {
              "id": "FALSE",
              "displayName": "Failure"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            },
            {
              "id": "WAITING",
              "displayName": "Waiting"
            }
          ]
        },
        "aebb1339-d0f2-4cc9-ad5e-1fce3dd6eecd": {
          "_id": "aebb1339-d0f2-4cc9-ad5e-1fce3dd6eecd",
          "_rev": "-480404893",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "b39262dc-dbc8-42fb-aa35-1570c54fab5a": {
          "_id": "b39262dc-dbc8-42fb-aa35-1570c54fab5a",
          "_rev": "-2116508073",
          "challengeMessage": {},
          "exitMessage": {},
          "waitingMessage": {},
          "secondsToWait": 5,
          "_type": {
            "_id": "PushWaitNode",
            "name": "Push Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            },
            {
              "id": "EXITED",
              "displayName": "Exit"
            }
          ]
        },
        "b5091cff-8203-47f8-81a5-39a428a0f55f": {
          "_id": "b5091cff-8203-47f8-81a5-39a428a0f55f",
          "_rev": "-949888354",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "dfa400c8-c1e7-494b-aab5-ccfae3351c29": {
          "_id": "dfa400c8-c1e7-494b-aab5-ccfae3351c29",
          "_rev": "-1570583499",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "fe4d16d8-79fc-4b66-b8b3-6071fe4943da": {
          "_id": "fe4d16d8-79fc-4b66-b8b3-6071fe4943da",
          "_rev": "708408433",
          "_type": {
            "_id": "RecoveryCodeDisplayNode",
            "name": "Recovery Code Display Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "innerNodes": {
        "608dbf81-86c3-403b-afe0-3a79d34c13d1": {
          "_id": "608dbf81-86c3-403b-afe0-3a79d34c13d1",
          "_rev": "2043094525",
          "script": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "edfd6dd2-aa20-461f-9d7a-8ac2579bc4bc": {
          "_id": "edfd6dd2-aa20-461f-9d7a-8ac2579bc4bc",
          "_rev": "-1476214755",
          "totpTimeInterval": 30,
          "maximumAllowedClockDrift": 5,
          "totpTimeSteps": 2,
          "totpHashAlgorithm": "HMAC_SHA1",
          "isRecoveryCodeAllowed": true,
          "algorithm": "TOTP",
          "hotpWindowSize": 100,
          "_type": {
            "_id": "OathTokenVerifierNode",
            "name": "OATH Token Verifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            },
            {
              "id": "recoveryCodeOutcome",
              "displayName": "Recovery Code"
            }
          ]
        },
        "decca9d6-6a25-4baa-bcf3-112a8c6d6b6e": {
          "_id": "decca9d6-6a25-4baa-bcf3-112a8c6d6b6e",
          "_rev": "570258524",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "5641ad47-ea89-4afb-b68d-8919a909bbc8": {
          "_id": "5641ad47-ea89-4afb-b68d-8919a909bbc8",
          "_rev": "-1654870284",
          "recoveryCodeType": "OATH",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "17b8af5c-7dd9-4b26-9bd7-ebcea9548a97": {
          "_id": "17b8af5c-7dd9-4b26-9bd7-ebcea9548a97",
          "_rev": "-198685504",
          "script": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "ae96d2ce-269a-43da-a567-22c5c894c1b1": {
          "_id": "ae96d2ce-269a-43da-a567-22c5c894c1b1",
          "_rev": "-1871821286",
          "totpTimeInterval": 30,
          "maximumAllowedClockDrift": 5,
          "totpTimeSteps": 2,
          "totpHashAlgorithm": "HMAC_SHA1",
          "isRecoveryCodeAllowed": false,
          "algorithm": "TOTP",
          "hotpWindowSize": 100,
          "_type": {
            "_id": "OathTokenVerifierNode",
            "name": "OATH Token Verifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            }
          ]
        }
      },
      "scripts": {
        "d7533919-235c-4548-99db-dd9cb33344ae": {
          "_id": "d7533919-235c-4548-99db-dd9cb33344ae",
          "name": "Threat Detection - Set Invalid code error message",
          "description": "Script to set invalid code error message",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"invalidCodeErrorMessage\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Set the below error message in shared state, can be displayed on the last UI Node\\n\\ntry {\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"Invalid Code\\\");\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "87cc8351-0d8c-4879-acee-6ddc72b29edc": {
          "_id": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "name": "Threat Detection - Validate verification code",
          "description": "Script to validate verification code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n*/\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    // Validate the verification code \\\\n\\\\\\n                    function validateCode() { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode) { \\\\n\\\\\\n                            // Set input properties to prevent user tampering \\\\n\\\\\\n                            verificationCode.setAttribute('maxlength', '6'); \\\\n\\\\\\n                            verificationCode.setAttribute('pattern', '[0-9]{6}'); \\\\n\\\\\\n                            verificationCode.setAttribute('inputmode', 'numeric'); \\\\n\\\\\\n                            // Check if the input is exactly 6 digits long and numeric \\\\n\\\\\\n                            const isValidCode = /^[0-9]{6}$/.test(verificationCode.value); \\\\n\\\\\\n                            submitBtn.disabled = !isValidCode; \\\\n\\\\\\n                            return isValidCode; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        return false; \\\\n\\\\\\n                    }; \\\\n\\\\\\n                    \\\\n\\\\\\n                    function preventEnterKeyDefault(event) { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (event.key === 'Enter' && !validateCode()) { \\\\n\\\\\\n                            event.preventDefault(); \\\\n\\\\\\n                            if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        // Auto-submit and go to 'Not Registered' path if method is not registered for the user, in that case it is assumed that button will be of type submit from Page Node \\\\n\\\\\\n                        const nextBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (nextBtn) { \\\\n\\\\\\n                            nextBtn.style.visibility='hidden'; \\\\n\\\\\\n                            nextBtn.click(); \\\\n\\\\\\n                        } \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode && submitBtn) { \\\\n\\\\\\n                            verificationCode.addEventListener('input', validateCode); \\\\n\\\\\\n                            verificationCode.addEventListener('keypress', preventEnterKeyDefault); \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                if (!validateCode()) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    // If both elements are present, initialize validation \\\\n\\\\\\n                    if (document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0] && document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                    else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                    } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {\\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0": {
          "_id": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "name": "Threat Detection - Validate Recovery Code input",
          "description": "Script to validate Recovery code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"// /*\\n//   - Data made available by nodes that have already executed are available in the sharedState variable.\\n//   - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n//  */\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const recoveryCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (recoveryCode && submitBtn) { \\\\n\\\\\\n                            // Set the maxlength attribute to 10 \\\\n\\\\\\n                            recoveryCode.setAttribute('maxlength', 10); \\\\n\\\\\\n                            const enableSubmitBtn = () => { \\\\n\\\\\\n                                // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }; \\\\n\\\\\\n                            // Revalidate before form submission \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (!isValidInput) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            recoveryCode.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                       } \\\\n\\\\\\n                      } \\\\n\\\\\\n                      if (document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                      else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                      } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "Threat Detection - Inner Journey": {
      "tree": {
        "_id": "Threat Detection - Inner Journey",
        "_rev": "102885971",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "eab087f3-b6f0-4f42-bc0b-a97b05ec416f",
        "innerTreeOnly": true,
        "nodes": {
          "18046835-3cc2-4399-adc9-c00f592f0d08": {
            "connections": {
              "EMAIL_NOT_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "EMAIL_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Send Suspicious Activity Mail",
            "nodeType": "EmailTemplateNode",
            "x": 981,
            "y": 327.03125
          },
          "20b4f246-37b6-4cc9-ac3e-9b84d86e0716": {
            "connections": {
              "Authentication": "5aab8ca7-73a3-4d39-bcd1-c741fc231be4",
              "Registration": "4fa24834-ef23-4367-afef-d887e7d9b724"
            },
            "displayName": "Determine Flow Type",
            "nodeType": "ScriptedDecisionNode",
            "x": 173.14285714285714,
            "y": 1040.236607142857
          },
          "32778673-c648-428a-b38f-d4b77e941f4a": {
            "connections": {
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Set Protect Params In Shared State",
            "nodeType": "ScriptedDecisionNode",
            "x": 1730,
            "y": 730.921875
          },
          "4fa24834-ef23-4367-afef-d887e7d9b724": {
            "connections": {
              "AITM_MITIGATION": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "BOT_MITIGATION": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "TEMP_EMAIL_MITIGATION": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "clientError": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "exceed": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "failure": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "high": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "low": "32778673-c648-428a-b38f-d4b77e941f4a",
              "medium": "32778673-c648-428a-b38f-d4b77e941f4a"
            },
            "displayName": "Reg: PingOne Protect Evaluation",
            "nodeType": "product-PingOneProtectEvaluationNode",
            "x": 573,
            "y": 1180.03125
          },
          "5aab8ca7-73a3-4d39-bcd1-c741fc231be4": {
            "connections": {
              "AITM_MITIGATION": "6dcfdab7-2704-460a-9a4a-ed263c781bfe",
              "BOT_MITIGATION": "6dcfdab7-2704-460a-9a4a-ed263c781bfe",
              "TEMP_EMAIL_MITIGATION": "6dcfdab7-2704-460a-9a4a-ed263c781bfe",
              "clientError": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "exceed": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "failure": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "high": "dd89d84a-ca35-426a-bafb-36e7fca3e99b",
              "low": "ca612b3a-8db4-4c2f-b7ba-33ccac3b3967",
              "medium": "dd89d84a-ca35-426a-bafb-36e7fca3e99b"
            },
            "displayName": "Auth: PingOne Protect Evaluation",
            "nodeType": "product-PingOneProtectEvaluationNode",
            "x": 554,
            "y": 486.03125
          },
          "5c6167e2-3fb5-480d-ac03-c7ccc7bcc1bb": {
            "connections": {
              "true": "20b4f246-37b6-4cc9-ac3e-9b84d86e0716"
            },
            "displayName": "Set UserId and Username For Protect",
            "nodeType": "ScriptedDecisionNode",
            "x": 148,
            "y": 888.421875
          },
          "6dcfdab7-2704-460a-9a4a-ed263c781bfe": {
            "connections": {
              "false": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "true": "85713e6b-433c-4027-89b8-8adcd0f1818a"
            },
            "displayName": "Account Active Decision",
            "nodeType": "AccountActiveDecisionNode",
            "x": 570,
            "y": 818.015625
          },
          "85713e6b-433c-4027-89b8-8adcd0f1818a": {
            "connections": {
              "outcome": "d72a53d9-3c58-4a04-9720-1ce0527adeba"
            },
            "displayName": "Disable Account",
            "nodeType": "AccountLockoutNode",
            "x": 582,
            "y": 975.03125
          },
          "ca612b3a-8db4-4c2f-b7ba-33ccac3b3967": {
            "connections": {
              "false": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "true": "e91a00af-f188-4853-9699-aab7dd7f2269"
            },
            "displayName": "Account Active Decision",
            "nodeType": "AccountActiveDecisionNode",
            "x": 998,
            "y": 515.015625
          },
          "d72a53d9-3c58-4a04-9720-1ce0527adeba": {
            "connections": {
              "EMAIL_NOT_SENT": "e20481be-4e83-4f47-a297-679c8fe454fd",
              "EMAIL_SENT": "e20481be-4e83-4f47-a297-679c8fe454fd"
            },
            "displayName": "Send Account Disabled Email",
            "nodeType": "EmailTemplateNode",
            "x": 822,
            "y": 959.03125
          },
          "d97a55fc-ead0-4d45-a6c5-d00a251578f4": {
            "connections": {
              "EMAIL_NOT_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "EMAIL_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Notify New Device Detected",
            "nodeType": "EmailTemplateNode",
            "x": 1346.111111111111,
            "y": 503.90625
          },
          "dc951eec-29a0-4b3d-ba3f-0fb81961aeb9": {
            "connections": {
              "false": "5c6167e2-3fb5-480d-ac03-c7ccc7bcc1bb",
              "true": "5c6167e2-3fb5-480d-ac03-c7ccc7bcc1bb"
            },
            "displayName": "Identify Existing User",
            "nodeType": "IdentifyExistingUserNode",
            "x": 176.15625,
            "y": 686.015625
          },
          "dd89d84a-ca35-426a-bafb-36e7fca3e99b": {
            "connections": {
              "outcome": "ca612b3a-8db4-4c2f-b7ba-33ccac3b3967"
            },
            "displayName": "Increase Auth Level",
            "nodeType": "ModifyAuthLevelNode",
            "x": 1023,
            "y": 639.515625
          },
          "e20481be-4e83-4f47-a297-679c8fe454fd": {
            "connections": {
              "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "displayName": "Update P1 Protect Eval Failure",
            "nodeType": "product-PingOneProtectResultNode",
            "x": 1561,
            "y": 999.03125
          },
          "e91a00af-f188-4853-9699-aab7dd7f2269": {
            "connections": {
              "highRisk": "18046835-3cc2-4399-adc9-c00f592f0d08",
              "low/medRisk": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "newDevice": "d97a55fc-ead0-4d45-a6c5-d00a251578f4"
            },
            "displayName": "Extract Protect Activity Params",
            "nodeType": "ScriptedDecisionNode",
            "x": 556.7777777777778,
            "y": 326
          },
          "eab087f3-b6f0-4f42-bc0b-a97b05ec416f": {
            "connections": {
              "eval": "dc951eec-29a0-4b3d-ba3f-0fb81961aeb9",
              "init": "ef2525cc-1d31-46d5-a4a5-bec6148575bf"
            },
            "displayName": "P1 Protect Action?",
            "nodeType": "ScriptedDecisionNode",
            "x": 174,
            "y": 456.03125
          },
          "ef2525cc-1d31-46d5-a4a5-bec6148575bf": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "PingOne Protect Initialize",
            "nodeType": "product-PingOneProtectInitializeNode",
            "x": 549,
            "y": 127.03125
          }
        },
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 2111,
            "y": 476
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 2126,
            "y": 1024
          },
          "startNode": {
            "x": 32,
            "y": 210
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "18046835-3cc2-4399-adc9-c00f592f0d08": {
          "_id": "18046835-3cc2-4399-adc9-c00f592f0d08",
          "_rev": "-1110563929",
          "emailTemplateName": "suspiciousActivity",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "_type": {
            "_id": "EmailTemplateNode",
            "name": "Email Template Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL_SENT",
              "displayName": "Email Sent"
            },
            {
              "id": "EMAIL_NOT_SENT",
              "displayName": "Email Not Sent"
            }
          ]
        },
        "20b4f246-37b6-4cc9-ac3e-9b84d86e0716": {
          "_id": "20b4f246-37b6-4cc9-ac3e-9b84d86e0716",
          "_rev": "1966594932",
          "script": "b32db242-c04b-4422-86cd-f9d84633c7fb",
          "outcomes": [
            "Authentication",
            "Registration"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "flowType"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Authentication",
              "displayName": "Authentication"
            },
            {
              "id": "Registration",
              "displayName": "Registration"
            }
          ]
        },
        "32778673-c648-428a-b38f-d4b77e941f4a": {
          "_id": "32778673-c648-428a-b38f-d4b77e941f4a",
          "_rev": "-1281783809",
          "script": "479bfa88-b58f-46e9-9909-59f43a1109c9",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "objectAttributes",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "PingOneProtectEvaluationNode",
            "objectAttributes"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "4fa24834-ef23-4367-afef-d887e7d9b724": {
          "_id": "4fa24834-ef23-4367-afef-d887e7d9b724",
          "_rev": "-1322639450",
          "flowType": "REGISTRATION",
          "pauseBehavioralData": true,
          "storeEvaluateResult": true,
          "deviceSharingType": "SHARED",
          "scoreThreshold": "300",
          "userId": "protectUserId",
          "username": "protectUsername",
          "userType": "EXTERNAL",
          "recommendedActions": [
            "BOT_MITIGATION",
            "AITM_MITIGATION",
            "TEMP_EMAIL_MITIGATION"
          ],
          "_type": {
            "_id": "product-PingOneProtectEvaluationNode",
            "name": "PingOne Protect Evaluation",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "high",
              "displayName": "High"
            },
            {
              "id": "medium",
              "displayName": "Medium"
            },
            {
              "id": "low",
              "displayName": "Low"
            },
            {
              "id": "exceed",
              "displayName": "Exceeds Score Threshold"
            },
            {
              "id": "failure",
              "displayName": "Failure"
            },
            {
              "id": "BOT_MITIGATION",
              "displayName": "BOT_MITIGATION"
            },
            {
              "id": "AITM_MITIGATION",
              "displayName": "AITM_MITIGATION"
            },
            {
              "id": "TEMP_EMAIL_MITIGATION",
              "displayName": "TEMP_EMAIL_MITIGATION"
            },
            {
              "id": "clientError",
              "displayName": "ClientError"
            }
          ]
        },
        "5aab8ca7-73a3-4d39-bcd1-c741fc231be4": {
          "_id": "5aab8ca7-73a3-4d39-bcd1-c741fc231be4",
          "_rev": "1639859143",
          "flowType": "AUTHENTICATION",
          "pauseBehavioralData": true,
          "storeEvaluateResult": true,
          "deviceSharingType": "SHARED",
          "scoreThreshold": "300",
          "userId": "protectUserId",
          "username": "protectUsername",
          "userType": "EXTERNAL",
          "recommendedActions": [
            "BOT_MITIGATION",
            "AITM_MITIGATION",
            "TEMP_EMAIL_MITIGATION"
          ],
          "_type": {
            "_id": "product-PingOneProtectEvaluationNode",
            "name": "PingOne Protect Evaluation",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "high",
              "displayName": "High"
            },
            {
              "id": "medium",
              "displayName": "Medium"
            },
            {
              "id": "low",
              "displayName": "Low"
            },
            {
              "id": "exceed",
              "displayName": "Exceeds Score Threshold"
            },
            {
              "id": "failure",
              "displayName": "Failure"
            },
            {
              "id": "BOT_MITIGATION",
              "displayName": "BOT_MITIGATION"
            },
            {
              "id": "AITM_MITIGATION",
              "displayName": "AITM_MITIGATION"
            },
            {
              "id": "TEMP_EMAIL_MITIGATION",
              "displayName": "TEMP_EMAIL_MITIGATION"
            },
            {
              "id": "clientError",
              "displayName": "ClientError"
            }
          ]
        },
        "5c6167e2-3fb5-480d-ac03-c7ccc7bcc1bb": {
          "_id": "5c6167e2-3fb5-480d-ac03-c7ccc7bcc1bb",
          "_rev": "-1362500713",
          "script": "3a508e25-5e4e-4c86-a63d-5c8aac219938",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "protectUserId",
            "protectUsername",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id",
            "username"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "6dcfdab7-2704-460a-9a4a-ed263c781bfe": {
          "_id": "6dcfdab7-2704-460a-9a4a-ed263c781bfe",
          "_rev": "104748331",
          "_type": {
            "_id": "AccountActiveDecisionNode",
            "name": "Account Active Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "85713e6b-433c-4027-89b8-8adcd0f1818a": {
          "_id": "85713e6b-433c-4027-89b8-8adcd0f1818a",
          "_rev": "-520444186",
          "lockAction": "LOCK",
          "_type": {
            "_id": "AccountLockoutNode",
            "name": "Account Lockout",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "ca612b3a-8db4-4c2f-b7ba-33ccac3b3967": {
          "_id": "ca612b3a-8db4-4c2f-b7ba-33ccac3b3967",
          "_rev": "-1530969121",
          "_type": {
            "_id": "AccountActiveDecisionNode",
            "name": "Account Active Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "d72a53d9-3c58-4a04-9720-1ce0527adeba": {
          "_id": "d72a53d9-3c58-4a04-9720-1ce0527adeba",
          "_rev": "-458126068",
          "emailTemplateName": "accountDisabled",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "_type": {
            "_id": "EmailTemplateNode",
            "name": "Email Template Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL_SENT",
              "displayName": "Email Sent"
            },
            {
              "id": "EMAIL_NOT_SENT",
              "displayName": "Email Not Sent"
            }
          ]
        },
        "d97a55fc-ead0-4d45-a6c5-d00a251578f4": {
          "_id": "d97a55fc-ead0-4d45-a6c5-d00a251578f4",
          "_rev": "1236253915",
          "emailTemplateName": "suspiciousActivity",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "_type": {
            "_id": "EmailTemplateNode",
            "name": "Email Template Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL_SENT",
              "displayName": "Email Sent"
            },
            {
              "id": "EMAIL_NOT_SENT",
              "displayName": "Email Not Sent"
            }
          ]
        },
        "dc951eec-29a0-4b3d-ba3f-0fb81961aeb9": {
          "_id": "dc951eec-29a0-4b3d-ba3f-0fb81961aeb9",
          "_rev": "-57898524",
          "identityAttribute": "userName",
          "identifier": "userName",
          "_type": {
            "_id": "IdentifyExistingUserNode",
            "name": "Identify Existing User",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "dd89d84a-ca35-426a-bafb-36e7fca3e99b": {
          "_id": "dd89d84a-ca35-426a-bafb-36e7fca3e99b",
          "_rev": "-1480906792",
          "authLevelIncrement": 1,
          "_type": {
            "_id": "ModifyAuthLevelNode",
            "name": "Modify Auth Level",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "e20481be-4e83-4f47-a297-679c8fe454fd": {
          "_id": "e20481be-4e83-4f47-a297-679c8fe454fd",
          "_rev": "-1850428680",
          "status": "FAILED",
          "_type": {
            "_id": "product-PingOneProtectResultNode",
            "name": "PingOne Protect Result",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "e91a00af-f188-4853-9699-aab7dd7f2269": {
          "_id": "e91a00af-f188-4853-9699-aab7dd7f2269",
          "_rev": "-357039107",
          "script": "34b32392-dd95-4fed-9e01-88fd6441dae7",
          "outcomes": [
            "highRisk",
            "newDevice",
            "low/medRisk"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "PingOneProtectEvaluationNode.RISK",
            "_id"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "highRisk",
              "displayName": "highRisk"
            },
            {
              "id": "newDevice",
              "displayName": "newDevice"
            },
            {
              "id": "low/medRisk",
              "displayName": "low/medRisk"
            }
          ]
        },
        "eab087f3-b6f0-4f42-bc0b-a97b05ec416f": {
          "_id": "eab087f3-b6f0-4f42-bc0b-a97b05ec416f",
          "_rev": "13635624",
          "script": "390bdf79-fadd-404f-9422-29823b7dce8a",
          "outcomes": [
            "init",
            "eval"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "p1ProtectAction"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "init",
              "displayName": "init"
            },
            {
              "id": "eval",
              "displayName": "eval"
            }
          ]
        },
        "ef2525cc-1d31-46d5-a4a5-bec6148575bf": {
          "_id": "ef2525cc-1d31-46d5-a4a5-bec6148575bf",
          "_rev": "-2138285053",
          "deviceAttributesToIgnore": [],
          "enableTrust": false,
          "disableTags": false,
          "behavioralDataCollection": true,
          "consoleLogEnabled": false,
          "deviceKeyRsyncIntervals": 14,
          "disableHub": false,
          "lazyMetadata": false,
          "_type": {
            "_id": "product-PingOneProtectInitializeNode",
            "name": "PingOne Protect Initialize",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        }
      },
      "innerNodes": {},
      "scripts": {
        "b32db242-c04b-4422-86cd-f9d84633c7fb": {
          "_id": "b32db242-c04b-4422-86cd-f9d84633c7fb",
          "name": "Threat Detection - P1 Protect Extract Flow Type",
          "description": "Script to extract flow type for Threat Detection Journey",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"flowType\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"Registration\\\", \\\"Authentication\\\"\\n*/\\n\\n// FlowType is required to be set in shared state in the parent journey\\n// Currently Reg & Authn flowTypes are supported in this script\\n// In future the list will increase to support types like Account Recovery, Authorization etc.\\ntry {\\n    if(nodeState.get('flowType') === \\\"Registration\\\") outcome = \\\"Registration\\\";\\n    else outcome = \\\"Authentication\\\";\\n    // Go to outcome\\n    action.goTo(outcome);    \\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "479bfa88-b58f-46e9-9909-59f43a1109c9": {
          "_id": "479bfa88-b58f-46e9-9909-59f43a1109c9",
          "name": "Threat Detection - Set Protect Activity Params in shared state",
          "description": "Script to set protect activity params in shared state ",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"objectAttributes\\\", \\\"PingOneProtectEvaluationNode.RISK\\\"\\n    - Script Outputs: \\\"objectAttributes\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function capitalizeFirstLetter(string) {\\n        return string\\n        .split(' ')                   // Split the string into an array of words\\n        .map(word => \\n            word.charAt(0).toUpperCase() + word.slice(1)\\n        )                             // Capitalize the first letter of each word\\n        .join(' ');                   // Join the array back into a single string\\n        // return string.length > 0 ? string.charAt(0).toUpperCase() + string.slice(1) : \\\"\\\";\\n    }\\n    \\n    var attributes = nodeState.get(\\\"objectAttributes\\\");\\n    \\n    var rawResponse = nodeState.get(\\\"PingOneProtectEvaluationNode.RISK\\\");\\n    \\n    \\n    // Get & Set the protect activity variables in shared state\\n    var protectActivityCity = rawResponse.details.city;\\n    var protectActivityState = rawResponse.details.state;\\n    var protectDeviceOS = rawResponse.details.device.os.name;\\n    \\n    protectActivityCity = capitalizeFirstLetter(protectActivityCity);\\n    protectActivityState = capitalizeFirstLetter(protectActivityState);\\n    \\n    if (attributes) {\\n      attributes.put(\\\"custom_protectActivityCity\\\", protectActivityCity);\\n      attributes.put(\\\"custom_protectActivityState\\\", protectActivityState);\\n      attributes.put(\\\"custom_protectDeviceOS\\\", protectDeviceOS);\\n      nodeState.putShared(\\\"objectAttributes\\\", attributes);\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\\n\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "3a508e25-5e4e-4c86-a63d-5c8aac219938": {
          "_id": "3a508e25-5e4e-4c86-a63d-5c8aac219938",
          "name": "Threat Detection - Set Protect userId and username",
          "description": "Script to set userId and username to be used in P1 Protect nodes",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"_id\\\", \\\"username\\\"\\n    - Script Outputs: \\\"protectUserId\\\", \\\"protectUsername\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    var protectUserId = nodeState.get(\\\"_id\\\");\\n    var protectUsername = nodeState.get(\\\"username\\\");\\n    \\n    if(protectUserId === null) protectUserId = protectUsername;\\n    \\n    nodeState.putShared(\\\"protectUserId\\\", protectUserId);\\n    nodeState.putShared(\\\"protectUsername\\\", protectUsername);\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "34b32392-dd95-4fed-9e01-88fd6441dae7": {
          "_id": "34b32392-dd95-4fed-9e01-88fd6441dae7",
          "name": "Threat Detection - P1 Protect Extract Parameters From Risk Evaluation",
          "description": "Script to extract parameters from P1 Protect Risk Evaluation",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"PingOneProtectEvaluationNode.RISK\\\", \\\"_id\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"highRisk\\\", \\\"newDevice\\\", \\\"low/medRisk\\\"\\n*/\\n\\ntry {\\n    function capitalizeFirstLetter(string) {\\n        return string\\n        .split(' ')                   // Split the string into an array of words\\n        .map(word => \\n            word.charAt(0).toUpperCase() + word.slice(1)\\n        )                             // Capitalize the first letter of each word\\n        .join(' ');                   // Join the array back into a single string\\n    }\\n    \\n    var rawResponse = nodeState.get(\\\"PingOneProtectEvaluationNode.RISK\\\");\\n    \\n    var riskLevel = rawResponse.result.level;\\n    \\n    // Get & Set the protect activity variables in user's profile (to be used in notification templates)\\n    var protectActivityCity = rawResponse.details.city;\\n    var protectActivityState = rawResponse.details.state;\\n    var protectDeviceOS = rawResponse.details.device.os.name;\\n    \\n    protectActivityCity = capitalizeFirstLetter(protectActivityCity);\\n    protectActivityState = capitalizeFirstLetter(protectActivityState);\\n    \\n    \\n    // Get the userId from nodestate\\n    var userId = nodeState.get(\\\"_id\\\");\\n    \\n    // Update the protectActvityCity attribute of user\\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_protectActivityCity\\\", \\\"value\\\":protectActivityCity}]);\\n    \\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_protectActivityState\\\", \\\"value\\\":protectActivityState}]);\\n    \\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_protectDeviceOS\\\", \\\"value\\\":protectDeviceOS}]);\\n    \\n    if(riskLevel === \\\"HIGH\\\") {\\n        outcome = \\\"highRisk\\\";\\n        action.goTo(outcome);\\n    }\\n    \\n    // Check if new device is found\\n    if(rawResponse.details.newDevice.status === \\\"UNKNOWN_DEVICE\\\") outcome = \\\"newDevice\\\";\\n    else outcome = \\\"low/medRisk\\\";\\n    \\n    // Go to outcome\\n    action.goTo(outcome);\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "390bdf79-fadd-404f-9422-29823b7dce8a": {
          "_id": "390bdf79-fadd-404f-9422-29823b7dce8a",
          "name": "Threat Detection - P1 Protect Action",
          "description": "Script to get action to be taken in Threat Detection Journey",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"p1ProtectAction\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"init\\\", \\\"eval\\\"\\n*/\\n\\ntry {\\n    // Only two state variables are expected to be put in shared state in the main journey: \\n    // \\\"init\\\" -> To initialize the P1 Protect to collect Risk SDK signals & \\n    // \\\"eval\\\" -> To send the Risk SDK signals to protect and evalute them\\n    var p1ProtectAction = nodeState.get(\\\"p1ProtectAction\\\");\\n    \\n    if(p1ProtectAction === \\\"init\\\") action.goTo(\\\"init\\\");\\n    else action.goTo(\\\"eval\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {
        "suspiciousActivity": {
          "_id": "emailTemplate/suspiciousActivity",
          "advancedEditor": true,
          "defaultLocale": "en",
          "description": "Fired when PingOne Protect detects some risk associated with the account",
          "displayName": "Suspicious Activity",
          "enabled": true,
          "from": "",
          "html": {
            "en": ""
          },
          "message": {
            "en": "<div style=\"display:block;width:400px;margin:0 auto;font-family:sans-serif;border:1px solid #c5c5c5;padding:30px 20px;text-align:center\">\n  <img src=\"https://assets.pingone.com/ux/ui-library/5.0.2/images/logo-pingidentity.png\" alt=\"Company Logo\" style=\"height:65px;margin-bottom:10px\" />\n  <div style=\"display:block\">\n    <div style=\"display:inline-block;width:40px;height:40px;border-radius:50%;background-color:red;color:white;font-size:24px;line-height:40px;text-align:center\">!</div>\n    <h2 style=\"margin-top:10px;margin-bottom:10px\">Sign-in attempt detected</h2>\n    <p>{{object.mail}}</p>\n    <hr style=\"width:100%;margin-top:20px;margin-bottom:25px;border:none;border-top:1px solid #c5c5c5\" />\n  </div>\n  <div style=\"text-align:left\">\n    <p id=\"alertText\">Someone just attempted to sign onto your account nearby {{object.custom_protectActivityCity}}, {{object.custom_protectActivityState}}. If this was not you, please consider resetting your password or contact support. Otherwise, ignore.</p>\n    <p>Thanks,\n        \n      \n      <br />The ${Brand Name} team\n        \n    \n    </p>\n  </div>\n</div>"
          },
          "mimeType": "text/html",
          "styles": "body {\n   background-color: #324054;\n   color: #455469;\n   padding: 60px;\n   text-align: center \n}\n a {\n   text-decoration: none;\n   color: #109cf1;\n}\n .content {\n   background-color: #fff;\n   border-radius: 4px;\n   margin: 0 auto;\n   padding: 48px;\n   width: 235px \n}\n",
          "subject": {
            "en": "Security alert"
          },
          "templateId": "suspiciousActivity"
        },
        "accountDisabled": {
          "_id": "emailTemplate/accountDisabled",
          "advancedEditor": true,
          "defaultLocale": "en",
          "description": "Fired when PingOne Protect detects critical risk associated with the account",
          "displayName": "Account Disabled",
          "enabled": true,
          "from": "",
          "html": {
            "en": ""
          },
          "message": {
            "en": "<div style=\"display:block;width:400px;margin:0 auto;font-family:sans-serif;border:1px solid #c5c5c5;padding:30px 20px;text-align:center\">\n  <img src=\"https://assets.pingone.com/ux/ui-library/5.0.2/images/logo-pingidentity.png\" alt=\"Company Logo\" style=\"height:65px;margin-bottom:10px\" />\n  <div style=\"display:block\">\n    <div style=\"display:inline-block;width:40px;height:40px;border-radius:50%;background-color:red;color:white;font-size:24px;line-height:40px;text-align:center\">!</div>\n    <h2 style=\"margin-top:10px;margin-bottom:10px\">Sign-in Attempt was blocked</h2>\n    <p>{{object.mail}}</p>\n    <hr style=\"width:100%;margin-top:20px;margin-bottom:25px;border:none;border-top:1px solid #c5c5c5\" />\n  </div>\n  <div style=\"text-align:left\">\n    <p id=\"alertText\">Someone just attempted to sign onto your account nearby {{object.custom_protectActivityCity}}, {{object.custom_protectActivityState}}. We have disabled the account for your security. If this was you, please contact support.</p>\n    <p>Thanks,\n        \n      \n      \n      <br />The ${Brand Name} team\n        \n    \n    \n    </p>\n  </div>\n</div>"
          },
          "mimeType": "text/html",
          "styles": "body {\n   background-color: #324054;\n   color: #455469;\n   padding: 60px;\n   text-align: center \n}\n a {\n   text-decoration: none;\n   color: #109cf1;\n}\n .content {\n   background-color: #fff;\n   border-radius: 4px;\n   margin: 0 auto;\n   padding: 48px;\n   width: 235px \n}\n",
          "subject": {
            "en": "Critical security alert"
          },
          "templateId": "accountDisabled"
        }
      },
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "MFA Authentication - Inner Journey": {
      "tree": {
        "_id": "MFA Authentication - Inner Journey",
        "_rev": "1918223089",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "6d8e2a09-49cf-42e7-b94e-59046c7da9be",
        "innerTreeOnly": true,
        "nodes": {
          "1d8f1610-0bf8-4d33-8ba1-57fa41ccb47e": {
            "x": 230,
            "y": 862.015625,
            "connections": {
              "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "EmailSuspendNode",
            "displayName": "Email Magic Link"
          },
          "59892180-4c18-4e1f-95f8-f78def8b752f": {
            "x": 820,
            "y": 255.03125,
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "8dd2f089-ab42-4f3d-b754-86985f8156df"
            },
            "nodeType": "VerifyAuthSenderNode",
            "displayName": "Twilio Verify Sender"
          },
          "d3c385db-0014-475b-8d79-681f0424c1cc": {
            "x": 1402,
            "y": 328.015625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "8ca347fe-adb9-4a6a-8cab-7ce8d20d7942"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "78aa469c-9a9a-4bdf-925b-4c2af282f877": {
            "x": 1379,
            "y": 15.015625,
            "connections": {
              "true": "733d692c-ad82-48f1-bbc4-6855ab5212dc"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "7a2a9bd1-d5a3-4bd6-abfb-6b618f33aeea": {
            "x": 830,
            "y": 47.015625,
            "connections": {
              "outcome": "733d692c-ad82-48f1-bbc4-6855ab5212dc"
            },
            "nodeType": "OneTimePasswordSmtpSenderNode",
            "displayName": "OTP Email Sender"
          },
          "f8cd1bb2-a0a7-4b6b-bf80-6a39c2123014": {
            "x": 1206,
            "y": 2467.015625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "9d76e136-4862-4b1a-9ec1-d9a67d6f4797"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "c8f7ba39-8da7-45bb-ae83-637f462cd724": {
            "x": 827,
            "y": 158.015625,
            "connections": {
              "outcome": "733d692c-ad82-48f1-bbc4-6855ab5212dc"
            },
            "nodeType": "OneTimePasswordSmsSenderNode",
            "displayName": "OTP SMS Sender"
          },
          "26486c73-4801-41a0-a60f-eba27d6149aa": {
            "x": 544,
            "y": 149.015625,
            "connections": {
              "outcome": "c8f7ba39-8da7-45bb-ae83-637f462cd724"
            },
            "nodeType": "OneTimePasswordGeneratorNode",
            "displayName": "HOTP Generator"
          },
          "733d692c-ad82-48f1-bbc4-6855ab5212dc": {
            "x": 1100,
            "y": 13.015625,
            "connections": {
              "false": "945ec619-8dfa-4904-aed3-d9fa8037d986",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Collect OTP"
          },
          "44e7a69c-b220-4d4e-b0b7-6a0a45e3e126": {
            "x": 547,
            "y": 250.03125,
            "connections": {
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "False": "e301438c-0bd0-429c-ab0c-66126501069a",
              "True": "59892180-4c18-4e1f-95f8-f78def8b752f"
            },
            "nodeType": "VerifyAuthIdentifierNode",
            "displayName": "Twilio Identifier"
          },
          "7859b9ee-0b45-4f4e-8cb9-5901cc8df6b2": {
            "x": 530,
            "y": 444.015625,
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "failure": "e301438c-0bd0-429c-ab0c-66126501069a",
              "noDevice": "e301438c-0bd0-429c-ab0c-66126501069a",
              "recoveryCode": "a7d2a8be-e923-4dc6-87f1-4fc878d77cfc",
              "success": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "unsupported": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "WebAuthnAuthenticationNode",
            "displayName": "WebAuthn Authentication Node"
          },
          "945ec619-8dfa-4904-aed3-d9fa8037d986": {
            "x": 1404,
            "y": 133,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "78aa469c-9a9a-4bdf-925b-4c2af282f877"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "8dd2f089-ab42-4f3d-b754-86985f8156df": {
            "x": 1099.984375,
            "y": 254.015625,
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "false": "d3c385db-0014-475b-8d79-681f0424c1cc",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Collect OTP"
          },
          "8ca347fe-adb9-4a6a-8cab-7ce8d20d7942": {
            "x": 1088,
            "y": 563.015625,
            "connections": {
              "true": "8dd2f089-ab42-4f3d-b754-86985f8156df"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "a64f9e2f-1a86-430e-b3f6-7ff2d92c186e": {
            "x": 573,
            "y": 2646.015625,
            "connections": {
              "NOT_REGISTERED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "SENT": "7ed73b41-e3ff-4a3a-a9c0-f1be6e06f6da"
            },
            "nodeType": "PushAuthenticationSenderNode",
            "displayName": "Push Sender"
          },
          "9d76e136-4862-4b1a-9ec1-d9a67d6f4797": {
            "x": 1170,
            "y": 2331.015625,
            "connections": {
              "true": "9fa48a27-b41a-4a53-9b22-7f305ad9c8c7"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "00d6f9db-9b4f-43ce-9e87-6b67cf33f284": {
            "x": 220,
            "y": 468.421875,
            "connections": {
              "EMAIL": "b51ba06b-8094-475c-8293-3f3133fd0baa",
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "FIDO2": "7859b9ee-0b45-4f4e-8cb9-5901cc8df6b2",
              "Magic Link": "1d8f1610-0bf8-4d33-8ba1-57fa41ccb47e",
              "OATH": "2276b39a-3e2a-4fd0-a831-44b1bd3a8a13",
              "PUSH": "a64f9e2f-1a86-430e-b3f6-7ff2d92c186e",
              "SMS": "26486c73-4801-41a0-a60f-eba27d6149aa",
              "VOICE": "44e7a69c-b220-4d4e-b0b7-6a0a45e3e126"
            },
            "nodeType": "PageNode",
            "displayName": "Select Auth Device"
          },
          "0cfa645f-94e3-4a8e-8c64-fc13054a302c": {
            "x": 535,
            "y": 2349.015625,
            "connections": {
              "true": "2276b39a-3e2a-4fd0-a831-44b1bd3a8a13"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "e69c9588-f8e1-4c6d-ac3a-3f035611880c": {
            "x": 925,
            "y": 2648.015625,
            "connections": {
              "DONE": "7ed73b41-e3ff-4a3a-a9c0-f1be6e06f6da",
              "EXITED": "9fa48a27-b41a-4a53-9b22-7f305ad9c8c7"
            },
            "nodeType": "PushWaitNode",
            "displayName": "Push Wait Node"
          },
          "9fa48a27-b41a-4a53-9b22-7f305ad9c8c7": {
            "x": 1201,
            "y": 2627.015625,
            "connections": {
              "false": "f8cd1bb2-a0a7-4b6b-bf80-6a39c2123014",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Recovery Code"
          },
          "a7d2a8be-e923-4dc6-87f1-4fc878d77cfc": {
            "x": 553,
            "y": 699.015625,
            "connections": {
              "false": "cc2964e1-ade1-4087-bec0-0f1db5b020e8",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Recovery Code"
          },
          "cc2964e1-ade1-4087-bec0-0f1db5b020e8": {
            "x": 563,
            "y": 973.515625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "e358c23f-3199-423c-8819-cf067f6fb2ed"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "cc12937b-69bb-46e8-91ab-34504bd6f316": {
            "x": 574.7142857142858,
            "y": 1407.950892857143,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "76ac3d1a-82d6-4086-8513-9ced0858ee79"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "402c5d71-61a8-4ad3-b8c3-c55898a85466": {
            "x": 578,
            "y": 2176.515625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "0cfa645f-94e3-4a8e-8c64-fc13054a302c"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "9fec1a6e-78ea-4830-a226-9e63ffe61d08": {
            "x": 572,
            "y": 1578.015625,
            "connections": {
              "false": "cc12937b-69bb-46e8-91ab-34504bd6f316",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Recovery Code"
          },
          "7ed73b41-e3ff-4a3a-a9c0-f1be6e06f6da": {
            "x": 903,
            "y": 2450.015625,
            "connections": {
              "EXPIRED": "6aeb8029-6131-41af-9193-449058fb415d",
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "WAITING": "e69c9588-f8e1-4c6d-ac3a-3f035611880c"
            },
            "nodeType": "PushResultVerifierNode",
            "displayName": "Push Result Verifier Node"
          },
          "6aeb8029-6131-41af-9193-449058fb415d": {
            "x": 571,
            "y": 2475.015625,
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "a64f9e2f-1a86-430e-b3f6-7ff2d92c186e"
            },
            "nodeType": "RetryLimitDecisionNode",
            "displayName": "Retry Limit Decision"
          },
          "76ac3d1a-82d6-4086-8513-9ced0858ee79": {
            "x": 533,
            "y": 1270.015625,
            "connections": {
              "true": "9fec1a6e-78ea-4830-a226-9e63ffe61d08"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "2276b39a-3e2a-4fd0-a831-44b1bd3a8a13": {
            "x": 573,
            "y": 1845.015625,
            "connections": {
              "failureOutcome": "402c5d71-61a8-4ad3-b8c3-c55898a85466",
              "notRegisteredOutcome": "e301438c-0bd0-429c-ab0c-66126501069a",
              "recoveryCodeOutcome": "9fec1a6e-78ea-4830-a226-9e63ffe61d08",
              "successOutcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "PageNode",
            "displayName": "Enter Verification Code"
          },
          "b51ba06b-8094-475c-8293-3f3133fd0baa": {
            "x": 545,
            "y": 37.015625,
            "connections": {
              "outcome": "7a2a9bd1-d5a3-4bd6-abfb-6b618f33aeea"
            },
            "nodeType": "OneTimePasswordGeneratorNode",
            "displayName": "HOTP Generator"
          },
          "e358c23f-3199-423c-8819-cf067f6fb2ed": {
            "x": 527.75,
            "y": 1142.01953125,
            "connections": {
              "true": "a7d2a8be-e923-4dc6-87f1-4fc878d77cfc"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Invalid Code Error Message"
          },
          "6d8e2a09-49cf-42e7-b94e-59046c7da9be": {
            "x": 226,
            "y": 283.03125,
            "connections": {
              "true": "00d6f9db-9b4f-43ce-9e87-6b67cf33f284",
              "false": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "IdentifyExistingUserNode",
            "displayName": "Identify Existing User"
          }
        },
        "staticNodes": {
          "startNode": {
            "x": 50,
            "y": 250
          },
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 1628,
            "y": 1175
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 1243,
            "y": 1175
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "1d8f1610-0bf8-4d33-8ba1-57fa41ccb47e": {
          "_id": "1d8f1610-0bf8-4d33-8ba1-57fa41ccb47e",
          "_rev": "-1451223452",
          "emailSuspendMessage": {
            "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
          },
          "emailTemplateName": "magicLinkTemplate",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "objectLookup": true,
          "_type": {
            "_id": "EmailSuspendNode",
            "name": "Email Suspend Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "59892180-4c18-4e1f-95f8-f78def8b752f": {
          "_id": "59892180-4c18-4e1f-95f8-f78def8b752f",
          "_rev": "1139516982",
          "accountSID": "demo",
          "authToken": null,
          "channel": "CALL",
          "identifierSharedState": "userIdentifier",
          "serviceSID": "demo",
          "requestIdentifier": false,
          "_type": {
            "_id": "VerifyAuthSenderNode",
            "name": "Twilio Verify Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        },
        "d3c385db-0014-475b-8d79-681f0424c1cc": {
          "_id": "d3c385db-0014-475b-8d79-681f0424c1cc",
          "_rev": "-146657409",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "78aa469c-9a9a-4bdf-925b-4c2af282f877": {
          "_id": "78aa469c-9a9a-4bdf-925b-4c2af282f877",
          "_rev": "1885402511",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "7a2a9bd1-d5a3-4bd6-abfb-6b618f33aeea": {
          "_id": "7a2a9bd1-d5a3-4bd6-abfb-6b618f33aeea",
          "_rev": "-543905652",
          "secretLabelIdentifier": "demo",
          "hostName": "demo",
          "hostPort": 465,
          "emailContent": {
            "en": "Your passcode is: {{OTP}}"
          },
          "emailSubject": {
            "en": "AIC: New authentication request"
          },
          "emailAttribute": "mail",
          "username": "demo",
          "fromEmailAddress": "demo",
          "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "sslOption": "SSL",
          "_type": {
            "_id": "OneTimePasswordSmtpSenderNode",
            "name": "OTP Email Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "f8cd1bb2-a0a7-4b6b-bf80-6a39c2123014": {
          "_id": "f8cd1bb2-a0a7-4b6b-bf80-6a39c2123014",
          "_rev": "1172263957",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "c8f7ba39-8da7-45bb-ae83-637f462cd724": {
          "_id": "c8f7ba39-8da7-45bb-ae83-637f462cd724",
          "_rev": "-2019352387",
          "secretLabelIdentifier": "demo",
          "hostName": "demo",
          "hostPort": 0,
          "mobilePhoneAttributeName": "telephoneNumber",
          "smsSubject": {
            "en": "AIC: New authentication request"
          },
          "username": "demo",
          "fromEmailAddress": "demo",
          "smsContent": {
            "en": "Your passcode is: {{OTP}}"
          },
          "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "sslOption": "SSL",
          "_type": {
            "_id": "OneTimePasswordSmsSenderNode",
            "name": "OTP SMS Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "26486c73-4801-41a0-a60f-eba27d6149aa": {
          "_id": "26486c73-4801-41a0-a60f-eba27d6149aa",
          "_rev": "-1009831915",
          "length": 6,
          "_type": {
            "_id": "OneTimePasswordGeneratorNode",
            "name": "HOTP Generator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "733d692c-ad82-48f1-bbc4-6855ab5212dc": {
          "_id": "733d692c-ad82-48f1-bbc4-6855ab5212dc",
          "_rev": "-1004405285",
          "nodes": [
            {
              "_id": "4ed11f51-d804-46d5-aba8-7b5103571144",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate OTP"
            },
            {
              "_id": "305b8554-2ab0-4070-aac4-7d9edd7ea04a",
              "nodeType": "OneTimePasswordCollectorDecisionNode",
              "displayName": "OTP Collector Decision"
            }
          ],
          "pageDescription": {
            "en": "Enter the passcode you received."
          },
          "pageHeader": {
            "en": "Enter Passcode"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "44e7a69c-b220-4d4e-b0b7-6a0a45e3e126": {
          "_id": "44e7a69c-b220-4d4e-b0b7-6a0a45e3e126",
          "_rev": "-1040587015",
          "identifierAttribute": "telephoneNumber",
          "identifierSharedState": "userIdentifier",
          "_type": {
            "_id": "VerifyAuthIdentifierNode",
            "name": "Twilio Identifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "True",
              "displayName": "True"
            },
            {
              "id": "False",
              "displayName": "False"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "7859b9ee-0b45-4f4e-8cb9-5901cc8df6b2": {
          "_id": "7859b9ee-0b45-4f4e-8cb9-5901cc8df6b2",
          "_rev": "-1213281635",
          "requiresResidentKey": false,
          "asScript": true,
          "origins": [],
          "userVerificationRequirement": "PREFERRED",
          "isRecoveryCodeAllowed": true,
          "timeout": 60,
          "_type": {
            "_id": "WebAuthnAuthenticationNode",
            "name": "WebAuthn Authentication Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "unsupported",
              "displayName": "Unsupported"
            },
            {
              "id": "noDevice",
              "displayName": "No Device Registered"
            },
            {
              "id": "success",
              "displayName": "Success"
            },
            {
              "id": "failure",
              "displayName": "Failure"
            },
            {
              "id": "error",
              "displayName": "Client Error"
            },
            {
              "id": "recoveryCode",
              "displayName": "Recovery Code"
            }
          ]
        },
        "945ec619-8dfa-4904-aed3-d9fa8037d986": {
          "_id": "945ec619-8dfa-4904-aed3-d9fa8037d986",
          "_rev": "2000542319",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "8dd2f089-ab42-4f3d-b754-86985f8156df": {
          "_id": "8dd2f089-ab42-4f3d-b754-86985f8156df",
          "_rev": "-759865322",
          "nodes": [
            {
              "_id": "ccaec499-0207-40f1-825d-8ec7f60b80c0",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate OTP"
            },
            {
              "_id": "861f3727-3d57-4f70-800b-1bbc34aa78cb",
              "nodeType": "VerifyAuthCollectorDecisionNode",
              "displayName": "Twilio Verify Collector Decision"
            }
          ],
          "pageDescription": {
            "en": "Enter the passcode you received."
          },
          "pageHeader": {
            "en": "Enter Passcode"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        },
        "8ca347fe-adb9-4a6a-8cab-7ce8d20d7942": {
          "_id": "8ca347fe-adb9-4a6a-8cab-7ce8d20d7942",
          "_rev": "-1613448368",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "a64f9e2f-1a86-430e-b3f6-7ff2d92c186e": {
          "_id": "a64f9e2f-1a86-430e-b3f6-7ff2d92c186e",
          "_rev": "672149121",
          "captureFailure": false,
          "contextInfo": false,
          "userMessage": {},
          "pushType": "DEFAULT",
          "customPayload": [],
          "mandatory": true,
          "messageTimeout": 120000,
          "_type": {
            "_id": "PushAuthenticationSenderNode",
            "name": "Push Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "SENT",
              "displayName": "Sent"
            },
            {
              "id": "NOT_REGISTERED",
              "displayName": "Not Registered"
            }
          ]
        },
        "9d76e136-4862-4b1a-9ec1-d9a67d6f4797": {
          "_id": "9d76e136-4862-4b1a-9ec1-d9a67d6f4797",
          "_rev": "-364681785",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "00d6f9db-9b4f-43ce-9e87-6b67cf33f284": {
          "_id": "00d6f9db-9b4f-43ce-9e87-6b67cf33f284",
          "_rev": "-85686796",
          "nodes": [
            {
              "_id": "a5f50d0b-5dba-41fa-bbd0-d23ade1565d9",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Select MFA Device"
            }
          ],
          "pageDescription": {
            "en": "Select an MFA method to use to sign on to your account."
          },
          "pageHeader": {
            "en": "Select Authentication Method"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL",
              "displayName": "EMAIL"
            },
            {
              "id": "SMS",
              "displayName": "SMS"
            },
            {
              "id": "VOICE",
              "displayName": "VOICE"
            },
            {
              "id": "FIDO2",
              "displayName": "FIDO2"
            },
            {
              "id": "OATH",
              "displayName": "OATH"
            },
            {
              "id": "PUSH",
              "displayName": "PUSH"
            },
            {
              "id": "Magic Link",
              "displayName": "Magic Link"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "0cfa645f-94e3-4a8e-8c64-fc13054a302c": {
          "_id": "0cfa645f-94e3-4a8e-8c64-fc13054a302c",
          "_rev": "-965397082",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "e69c9588-f8e1-4c6d-ac3a-3f035611880c": {
          "_id": "e69c9588-f8e1-4c6d-ac3a-3f035611880c",
          "_rev": "-2017714657",
          "challengeMessage": {},
          "exitMessage": {},
          "waitingMessage": {},
          "secondsToWait": 5,
          "_type": {
            "_id": "PushWaitNode",
            "name": "Push Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            },
            {
              "id": "EXITED",
              "displayName": "Exit"
            }
          ]
        },
        "9fa48a27-b41a-4a53-9b22-7f305ad9c8c7": {
          "_id": "9fa48a27-b41a-4a53-9b22-7f305ad9c8c7",
          "_rev": "-1660689552",
          "nodes": [
            {
              "_id": "6a426b2b-9e69-47ed-9d96-1027dacd6fcb",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "21c58fc6-b8ec-4615-b42b-b2b2e4235b7b",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "PUSH Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "a7d2a8be-e923-4dc6-87f1-4fc878d77cfc": {
          "_id": "a7d2a8be-e923-4dc6-87f1-4fc878d77cfc",
          "_rev": "1801495455",
          "nodes": [
            {
              "_id": "eceb88a4-363b-45ab-8092-8d810698d81e",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "9bd1d9b6-fb69-4c4e-bb01-c5080779b578",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "WEB_AUTHN Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "cc2964e1-ade1-4087-bec0-0f1db5b020e8": {
          "_id": "cc2964e1-ade1-4087-bec0-0f1db5b020e8",
          "_rev": "-377312685",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "cc12937b-69bb-46e8-91ab-34504bd6f316": {
          "_id": "cc12937b-69bb-46e8-91ab-34504bd6f316",
          "_rev": "553568216",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "402c5d71-61a8-4ad3-b8c3-c55898a85466": {
          "_id": "402c5d71-61a8-4ad3-b8c3-c55898a85466",
          "_rev": "749781631",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "9fec1a6e-78ea-4830-a226-9e63ffe61d08": {
          "_id": "9fec1a6e-78ea-4830-a226-9e63ffe61d08",
          "_rev": "2111248233",
          "nodes": [
            {
              "_id": "5d64f2ec-c8a6-43b0-94cd-1162f74dbc01",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Recovery Code"
            },
            {
              "_id": "96ce645a-a8fb-4442-99fb-925fa6ca6de1",
              "nodeType": "RecoveryCodeCollectorDecisionNode",
              "displayName": "OATH Recovery Code Collector Decision"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Recovery Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "7ed73b41-e3ff-4a3a-a9c0-f1be6e06f6da": {
          "_id": "7ed73b41-e3ff-4a3a-a9c0-f1be6e06f6da",
          "_rev": "1373775766",
          "_type": {
            "_id": "PushResultVerifierNode",
            "name": "Push Result Verifier Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "Success"
            },
            {
              "id": "FALSE",
              "displayName": "Failure"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            },
            {
              "id": "WAITING",
              "displayName": "Waiting"
            }
          ]
        },
        "6aeb8029-6131-41af-9193-449058fb415d": {
          "_id": "6aeb8029-6131-41af-9193-449058fb415d",
          "_rev": "483859547",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "76ac3d1a-82d6-4086-8513-9ced0858ee79": {
          "_id": "76ac3d1a-82d6-4086-8513-9ced0858ee79",
          "_rev": "1273217797",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "2276b39a-3e2a-4fd0-a831-44b1bd3a8a13": {
          "_id": "2276b39a-3e2a-4fd0-a831-44b1bd3a8a13",
          "_rev": "1461324543",
          "nodes": [
            {
              "_id": "38f15244-8bd2-41fb-8948-b51236285a6a",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Verification Code"
            },
            {
              "_id": "15f8e247-dc5a-46c9-b697-cf52286a8302",
              "nodeType": "OathTokenVerifierNode",
              "displayName": "OATH Token Verifier"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Enter Verification Code"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            },
            {
              "id": "recoveryCodeOutcome",
              "displayName": "Recovery Code"
            }
          ]
        },
        "b51ba06b-8094-475c-8293-3f3133fd0baa": {
          "_id": "b51ba06b-8094-475c-8293-3f3133fd0baa",
          "_rev": "-318109453",
          "length": 6,
          "_type": {
            "_id": "OneTimePasswordGeneratorNode",
            "name": "HOTP Generator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "e358c23f-3199-423c-8819-cf067f6fb2ed": {
          "_id": "e358c23f-3199-423c-8819-cf067f6fb2ed",
          "_rev": "167081040",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "6d8e2a09-49cf-42e7-b94e-59046c7da9be": {
          "_id": "6d8e2a09-49cf-42e7-b94e-59046c7da9be",
          "_rev": "1746693978",
          "identityAttribute": "userName",
          "identifier": "userName",
          "_type": {
            "_id": "IdentifyExistingUserNode",
            "name": "Identify Existing User",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        }
      },
      "innerNodes": {
        "4ed11f51-d804-46d5-aba8-7b5103571144": {
          "_id": "4ed11f51-d804-46d5-aba8-7b5103571144",
          "_rev": "-1507872909",
          "script": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage",
            "oneTimePassword"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "305b8554-2ab0-4070-aac4-7d9edd7ea04a": {
          "_id": "305b8554-2ab0-4070-aac4-7d9edd7ea04a",
          "_rev": "940763699",
          "passwordExpiryTime": 5,
          "_type": {
            "_id": "OneTimePasswordCollectorDecisionNode",
            "name": "OTP Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "ccaec499-0207-40f1-825d-8ec7f60b80c0": {
          "_id": "ccaec499-0207-40f1-825d-8ec7f60b80c0",
          "_rev": "1087988125",
          "script": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "861f3727-3d57-4f70-800b-1bbc34aa78cb": {
          "_id": "861f3727-3d57-4f70-800b-1bbc34aa78cb",
          "_rev": "618998948",
          "hideCode": true,
          "identifierSharedState": "userIdentifier",
          "_type": {
            "_id": "VerifyAuthCollectorDecisionNode",
            "name": "Twilio Verify Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        },
        "a5f50d0b-5dba-41fa-bbd0-d23ade1565d9": {
          "_id": "a5f50d0b-5dba-41fa-bbd0-d23ade1565d9",
          "_rev": "-1620730510",
          "script": "1125d585-0e19-4677-bd18-aa97a800b45d",
          "outcomes": [
            "EMAIL",
            "SMS",
            "VOICE",
            "FIDO2",
            "OATH",
            "PUSH",
            "Magic Link",
            "Error"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id",
            "ciam_allowedMFATypes",
            "ciam_magicLinkEnabled"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL",
              "displayName": "EMAIL"
            },
            {
              "id": "SMS",
              "displayName": "SMS"
            },
            {
              "id": "VOICE",
              "displayName": "VOICE"
            },
            {
              "id": "FIDO2",
              "displayName": "FIDO2"
            },
            {
              "id": "OATH",
              "displayName": "OATH"
            },
            {
              "id": "PUSH",
              "displayName": "PUSH"
            },
            {
              "id": "Magic Link",
              "displayName": "Magic Link"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "6a426b2b-9e69-47ed-9d96-1027dacd6fcb": {
          "_id": "6a426b2b-9e69-47ed-9d96-1027dacd6fcb",
          "_rev": "814928889",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "21c58fc6-b8ec-4615-b42b-b2b2e4235b7b": {
          "_id": "21c58fc6-b8ec-4615-b42b-b2b2e4235b7b",
          "_rev": "-34501",
          "recoveryCodeType": "PUSH",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "eceb88a4-363b-45ab-8092-8d810698d81e": {
          "_id": "eceb88a4-363b-45ab-8092-8d810698d81e",
          "_rev": "-1996392125",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "9bd1d9b6-fb69-4c4e-bb01-c5080779b578": {
          "_id": "9bd1d9b6-fb69-4c4e-bb01-c5080779b578",
          "_rev": "-1511875912",
          "recoveryCodeType": "WEB_AUTHN",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "5d64f2ec-c8a6-43b0-94cd-1162f74dbc01": {
          "_id": "5d64f2ec-c8a6-43b0-94cd-1162f74dbc01",
          "_rev": "1330050661",
          "script": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "96ce645a-a8fb-4442-99fb-925fa6ca6de1": {
          "_id": "96ce645a-a8fb-4442-99fb-925fa6ca6de1",
          "_rev": "-961081388",
          "recoveryCodeType": "OATH",
          "_type": {
            "_id": "RecoveryCodeCollectorDecisionNode",
            "name": "Recovery Code Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "38f15244-8bd2-41fb-8948-b51236285a6a": {
          "_id": "38f15244-8bd2-41fb-8948-b51236285a6a",
          "_rev": "-983887607",
          "script": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "15f8e247-dc5a-46c9-b697-cf52286a8302": {
          "_id": "15f8e247-dc5a-46c9-b697-cf52286a8302",
          "_rev": "-8505654",
          "totpTimeInterval": 30,
          "maximumAllowedClockDrift": 5,
          "totpTimeSteps": 2,
          "totpHashAlgorithm": "HMAC_SHA1",
          "isRecoveryCodeAllowed": true,
          "algorithm": "TOTP",
          "hotpWindowSize": 100,
          "_type": {
            "_id": "OathTokenVerifierNode",
            "name": "OATH Token Verifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "successOutcome",
              "displayName": "Success"
            },
            {
              "id": "failureOutcome",
              "displayName": "Failure"
            },
            {
              "id": "notRegisteredOutcome",
              "displayName": "Not registered"
            },
            {
              "id": "recoveryCodeOutcome",
              "displayName": "Recovery Code"
            }
          ]
        }
      },
      "scripts": {
        "d7533919-235c-4548-99db-dd9cb33344ae": {
          "_id": "d7533919-235c-4548-99db-dd9cb33344ae",
          "name": "Threat Detection - Set Invalid code error message",
          "description": "Script to set invalid code error message",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"invalidCodeErrorMessage\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Set the below error message in shared state, can be displayed on the last UI Node\\n\\ntry {\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"Invalid Code\\\");\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "ee3e8507-00ff-48e8-a861-ea3a87a0c278": {
          "_id": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "name": "Threat Detection - Validate OTP input",
          "description": "Script to validate OTP input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"oneTimePassword\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Note: If HOTP Genrator node is used in prior, \\\"oneTimePassword\\\" will be a transient state property, make sure to make it available in script inputs. \\n// If the OTP is generated by Twilio nodes, the default length is set to 6 and only digits are considered. Modify this if necessary.\\n\\ntry {\\n    function validateInput(otpLength) {\\n        return String(\\\" \\\\n\\\\\\n                    var otpLength = \\\" + otpLength + \\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    // Validate the passcode \\\\n\\\\\\n                    function validateCode() { \\\\n\\\\\\n                        const passcode = document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (passcode) { \\\\n\\\\\\n                            // Set input properties to prevent user tampering \\\\n\\\\\\n                            passcode.setAttribute('maxlength', otpLength); \\\\n\\\\\\n                            passcode.setAttribute('pattern', '[0-9]{' + otpLength + '}'); \\\\n\\\\\\n                            passcode.setAttribute('inputmode', 'numeric'); \\\\n\\\\\\n                            // Check if the input is exactly 6 digits long and numeric \\\\n\\\\\\n                            const isValidCode = new RegExp('^[0-9]{' + otpLength + '}$').test(passcode.value); \\\\n\\\\\\n                            submitBtn.disabled = !isValidCode; \\\\n\\\\\\n                            return isValidCode; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        return false; \\\\n\\\\\\n                    }; \\\\n\\\\\\n                    \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const passcode = document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (passcode && submitBtn) { \\\\n\\\\\\n                            passcode.addEventListener('input', validateCode); \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                if (!validateCode()) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    // For HOTP and Twilio OTP collector nodes, if either of the element is present, initialize validation \\\\n\\\\\\n                    if (document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                    else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                    } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n\\n    // Get \\\"oneTimePassword\\\" shared in transient state by the HOTP Generator node or default it to 6\\n    var otpLength = nodeState.get(\\\"oneTimePassword\\\") ? nodeState.get(\\\"oneTimePassword\\\").length : 6;\\n    \\n    if (callbacks.isEmpty()) {\\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput(otpLength));\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "1125d585-0e19-4677-bd18-aa97a800b45d": {
          "_id": "1125d585-0e19-4677-bd18-aa97a800b45d",
          "name": "Threat Detection - Get user's registered MFA devices",
          "description": "Script to fetch user's registered MFA methods",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"_id\\\", \\\"ciam_allowedMFATypes\\\", \\\"ciam_magicLinkEnabled\\\"\\n    - Script Outputs: \\\"usableMFADevices\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\", \\\"Error\\\"\\n*/\\n\\ntry {\\n    // Retrieve user ID and allowed MFA devices\\n    var userId = nodeState.get(\\\"_id\\\");\\n    var allowedMFAMethods = nodeState.get(\\\"ciam_allowedMFATypes\\\");\\n    \\n    var mfaMapping = {\\n        \\\"EMAIL\\\": \\\"allowEmail\\\",\\n        \\\"SMS\\\": \\\"allowSMS\\\",\\n        \\\"VOICE\\\": \\\"allowVoice\\\",\\n        \\\"OATH\\\": \\\"allowOATH\\\",\\n        \\\"PUSH\\\": \\\"allowPush\\\",\\n        \\\"FIDO2\\\": \\\"allowFIDO2\\\"\\n    };\\n    \\n    var allowEmail = false, allowSMS = false, allowVoice = false, allowOATH = false, allowPush = false, allowFIDO2 = false;\\n    \\n    allowedMFAMethods.forEach(device => {\\n        if (mfaMapping[device]) {\\n            this[mfaMapping[device]] = true;\\n        }\\n    });\\n    \\n    var mfaDevicesObj = openidm.read(\\\"managed/alpha_user/\\\" + userId, null, [\\\"custom_mfaDevices\\\"]);\\n    var mfaDevices = (mfaDevicesObj && mfaDevicesObj.custom_mfaDevices) ? mfaDevicesObj.custom_mfaDevices : [];\\n    \\n    // By default returned mfaDevices is of Object type so values are parsed in a new array\\n    var usableMFADevices = [];\\n    \\n    // Store MFA devices and additional option in shared state    \\n    mfaDevices.forEach(device => {\\n        usableMFADevices.push(device);\\n    });\\n    \\n    usableMFADevices = usableMFADevices.filter(device =>\\n        (device === \\\"SMS\\\" && allowSMS) ||\\n        (device === \\\"EMAIL\\\" && allowEmail) ||\\n        (device === \\\"VOICE\\\" && allowVoice) ||\\n        (device === \\\"OATH\\\" && allowOATH) ||\\n        (device === \\\"PUSH\\\" && allowPush) ||\\n        (device === \\\"FIDO2\\\" && allowFIDO2)                               \\n    );\\n\\n    // Index of latest registered MFA device\\n    var idxLatestMFADevice = usableMFADevices ? usableMFADevices.length - 1 : -1;\\n    \\n    // Add Magic Link, if enabled by Admin\\n    var magicLinkEnabled = nodeState.get(\\\"ciam_magicLinkEnabled\\\");\\n    if(magicLinkEnabled) usableMFADevices.push(\\\"Magic Link\\\");\\n    \\n    // nodeState.putShared(\\\"usableMFADevices\\\", usableMFADevices);\\n    \\n    // Handle callback logic\\n    if (callbacks.isEmpty()) {\\n      callbacksBuilder.choiceCallback(\\\"Select an MFA device\\\", usableMFADevices, idxLatestMFADevice, false);\\n    } else {\\n      // Callbacks returned from browser, save selected choice\\n      var index = callbacks.getChoiceCallbacks().get(0)[0];\\n      var selectedDevice = usableMFADevices[index] || null;\\n    \\n      if (!selectedDevice) {\\n        nodeState.putShared(\\\"errorMessage\\\", \\\"No registered MFA device found\\\");\\n        // Go to error  \\n        action.goTo(\\\"Error\\\");\\n      } else {\\n        // Go to authentication for that selected MFA device\\n        action.goTo(selectedDevice);\\n      }\\n    }\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0": {
          "_id": "a6c73f01-13f2-428d-9fc2-8fccbdc4b2d0",
          "name": "Threat Detection - Validate Recovery Code input",
          "description": "Script to validate Recovery code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"// /*\\n//   - Data made available by nodes that have already executed are available in the sharedState variable.\\n//   - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n//  */\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const recoveryCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (recoveryCode && submitBtn) { \\\\n\\\\\\n                            // Set the maxlength attribute to 10 \\\\n\\\\\\n                            recoveryCode.setAttribute('maxlength', 10); \\\\n\\\\\\n                            const enableSubmitBtn = () => { \\\\n\\\\\\n                                // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }; \\\\n\\\\\\n                            // Revalidate before form submission \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                const isValidInput = recoveryCode.value.length === 10; \\\\n\\\\\\n                                if (!isValidInput) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            recoveryCode.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                       } \\\\n\\\\\\n                      } \\\\n\\\\\\n                      if (document.querySelectorAll('input[data-vv-as=\\\\\\\"Recovery Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                      else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                      } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "87cc8351-0d8c-4879-acee-6ddc72b29edc": {
          "_id": "87cc8351-0d8c-4879-acee-6ddc72b29edc",
          "name": "Threat Detection - Validate verification code",
          "description": "Script to validate verification code input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n*/\\n\\n/*\\n    - Script Inputs: \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    // Validate the verification code \\\\n\\\\\\n                    function validateCode() { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode) { \\\\n\\\\\\n                            // Set input properties to prevent user tampering \\\\n\\\\\\n                            verificationCode.setAttribute('maxlength', '6'); \\\\n\\\\\\n                            verificationCode.setAttribute('pattern', '[0-9]{6}'); \\\\n\\\\\\n                            verificationCode.setAttribute('inputmode', 'numeric'); \\\\n\\\\\\n                            // Check if the input is exactly 6 digits long and numeric \\\\n\\\\\\n                            const isValidCode = /^[0-9]{6}$/.test(verificationCode.value); \\\\n\\\\\\n                            submitBtn.disabled = !isValidCode; \\\\n\\\\\\n                            return isValidCode; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        return false; \\\\n\\\\\\n                    }; \\\\n\\\\\\n                    \\\\n\\\\\\n                    function preventEnterKeyDefault(event) { \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (event.key === 'Enter' && !validateCode()) { \\\\n\\\\\\n                            event.preventDefault(); \\\\n\\\\\\n                            if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        // Auto-submit and go to 'Not Registered' path if method is not registered for the user, in that case it is assumed that button will be of type submit from Page Node \\\\n\\\\\\n                        const nextBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (nextBtn) { \\\\n\\\\\\n                            nextBtn.style.visibility='hidden'; \\\\n\\\\\\n                            nextBtn.click(); \\\\n\\\\\\n                        } \\\\n\\\\\\n                        const submitBtn = document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                        const verificationCode = document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (verificationCode && submitBtn) { \\\\n\\\\\\n                            verificationCode.addEventListener('input', validateCode); \\\\n\\\\\\n                            verificationCode.addEventListener('keypress', preventEnterKeyDefault); \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                if (!validateCode()) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    // If both elements are present, initialize validation \\\\n\\\\\\n                    if (document.querySelectorAll('button[type=\\\\\\\"button\\\\\\\"]')[0] && document.querySelectorAll('input[data-vv-as=\\\\\\\"Enter verification code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                    else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                    } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n    \\n    if (callbacks.isEmpty()) {\\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {
        "magicLinkTemplate": {
          "_id": "emailTemplate/magicLinkTemplate",
          "advancedEditor": true,
          "defaultLocale": "en",
          "description": "To authenticate with email address ",
          "displayName": "Magic Link Template",
          "enabled": true,
          "from": "",
          "html": {
            "en": "",
            "fr": ""
          },
          "message": {
            "en": "<div style=\"display:block;text-align:center;font-family:sans-serif;border:1px solid #c5c5c5;width:400px;padding:30px 20px\">\n  <img src=\"https://assets.pingone.com/ux/ui-library/5.0.2/images/logo-pingidentity.png\" alt=\"Company Logo\" style=\"height:65px;margin-bottom:10px\" />\n  <h1>Sign On Request</h1>\n  <div style=\"margin-top:20px;margin-bottom:25px\">\n    <p>Please click the link below to authenticate. </p>\n    <a href=\"{{object.resumeURI}}\" style=\"font-size:14pt\">Complete Sign On</a>\n  </div>\n</div>",
            "fr": "<html>\n  <head></head>\n  <body style=\"background-color: #324054; color: #5e6d82; padding: 60px; text-align: center;\">\n    <h3>Ceci est votre mail d'inscription.</h3>\n    <p>\n      <a href=\"{{object.resumeURI}}\" style=\"text-decoration: none; color: #109cf1;\">Lien de vérification email</a>\n    </p>\n  </body>\n</html>"
          },
          "mimeType": "text/html",
          "styles": "body{background-color:#324054;color:#5e6d82;padding:60px;text-align:center}a{text-decoration:none;color:#109cf1}.content{background-color:#fff;border-radius:4px;margin:0 auto;padding:48px;width:235px}",
          "subject": {
            "en": "Sign On Request",
            "fr": "Créer un nouveau compte"
          },
          "templateId": "magicLinkTemplate"
        }
      },
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "MFA Device Registration - Inner Journey": {
      "tree": {
        "_id": "MFA Device Registration - Inner Journey",
        "_rev": "-937327286",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "5820deb1-d71d-4754-97fc-cda5ee8b6416",
        "innerTreeOnly": true,
        "nodes": {
          "0d750deb-3604-4b55-a830-4d25317aeaa9": {
            "connections": {
              "true": "263a5020-051b-4333-97e1-31b4612d030d"
            },
            "displayName": "Set Invalid Code Error Message",
            "nodeType": "ScriptedDecisionNode",
            "x": 1693.888888888889,
            "y": 677.6840277777778
          },
          "263a5020-051b-4333-97e1-31b4612d030d": {
            "connections": {
              "false": "3a8af3f5-e1aa-4856-a059-17b1a39ee513",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Collect OTP",
            "nodeType": "PageNode",
            "x": 1726,
            "y": 775.015625
          },
          "2b779980-8038-4f29-ad31-a754b6baba01": {
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "5db175d6-78ad-4020-87e7-8afae5e1a729"
            },
            "displayName": "Twilio Verify Sender",
            "nodeType": "VerifyAuthSenderNode",
            "x": 1382,
            "y": 1236.03125
          },
          "2e4ce40b-54d0-43a0-8118-5ba91c064c05": {
            "connections": {
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "False": "e301438c-0bd0-429c-ab0c-66126501069a",
              "True": "2b779980-8038-4f29-ad31-a754b6baba01"
            },
            "displayName": "Twilio Verify Lookup",
            "nodeType": "VerifyAuthLookupNode",
            "x": 1015,
            "y": 1227.03125
          },
          "31e90931-3888-4de1-b426-0d6579c0d78f": {
            "connections": {
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "FIDO2": "ba41ae63-5bbe-4b7b-a4e5-a90304d5537b",
              "OATH": "b9328338-0df6-46c4-8392-73fee238c2a2",
              "OATH+PUSH": "5283a80c-0d77-4b10-b156-502241657a0c",
              "PUSH": "8f52da1e-b28d-4ce5-a77a-d797f1237e72",
              "SMS": "7d4578b5-01e0-4c67-a9fb-2afdefbb0b54",
              "VOICE": "9df13d2c-b18a-48eb-b2c4-fd8c334ca9f0"
            },
            "displayName": "Select Authn Device",
            "nodeType": "PageNode",
            "x": 233,
            "y": 442.421875
          },
          "3a8af3f5-e1aa-4856-a059-17b1a39ee513": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "0d750deb-3604-4b55-a830-4d25317aeaa9"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 1727,
            "y": 1033.015625
          },
          "44cc2d56-24aa-4671-8ef8-b99e52a065b3": {
            "connections": {
              "true": "5db175d6-78ad-4020-87e7-8afae5e1a729"
            },
            "displayName": "Set Invalid Code Error Message",
            "nodeType": "ScriptedDecisionNode",
            "x": 1347,
            "y": 1517.015625
          },
          "4c57f922-30fc-4814-bce0-7090de73cb9a": {
            "connections": {
              "outcome": "8b49bdc3-26e3-45e6-877d-297afcc55ac4"
            },
            "displayName": "Collect Phone Number",
            "nodeType": "PageNode",
            "x": 643,
            "y": 1457.015625
          },
          "5283a80c-0d77-4b10-b156-502241657a0c": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Register OATH & PUSH",
            "nodeType": "InnerTreeEvaluatorNode",
            "x": 996,
            "y": 600.015625
          },
          "558e7b97-c2f7-4c85-8f51-1f20657f1659": {
            "connections": {
              "outcome": "974a86b4-f951-4b35-978b-255dc7e7c94a"
            },
            "displayName": "Collect Phone Number",
            "nodeType": "PageNode",
            "x": 645,
            "y": 1013.015625
          },
          "5820deb1-d71d-4754-97fc-cda5ee8b6416": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "31e90931-3888-4de1-b426-0d6579c0d78f"
            },
            "displayName": "Get User Id In Shared State",
            "nodeType": "IdentifyExistingUserNode",
            "x": 218.3125,
            "y": 812.03125
          },
          "5db175d6-78ad-4020-87e7-8afae5e1a729": {
            "connections": {
              "error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "false": "8e735644-4c63-4a53-9343-d97a56fd9dd4",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Collect OTP",
            "nodeType": "PageNode",
            "x": 1729,
            "y": 1181.015625
          },
          "7942c6ca-65c5-499c-b95c-645309cbbc1c": {
            "connections": {
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "b8f3f331-0b9e-4ddd-ae6e-07f84b09259c"
            },
            "displayName": "Update MFA Devices Object",
            "nodeType": "ScriptedDecisionNode",
            "x": 2072,
            "y": 622.421875
          },
          "7d4578b5-01e0-4c67-a9fb-2afdefbb0b54": {
            "connections": {
              "false": "558e7b97-c2f7-4c85-8f51-1f20657f1659",
              "true": "dfc8eb16-485b-499f-9d26-b5b1882b29b6"
            },
            "displayName": "Check If Phone No. Is Present",
            "nodeType": "AttributePresentDecisionNode",
            "x": 601.40625,
            "y": 805.03125
          },
          "8b49bdc3-26e3-45e6-877d-297afcc55ac4": {
            "connections": {
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "PATCHED": "9df13d2c-b18a-48eb-b2c4-fd8c334ca9f0"
            },
            "displayName": "Update User",
            "nodeType": "PatchObjectNode",
            "x": 1036.46875,
            "y": 1465.03125
          },
          "8e735644-4c63-4a53-9343-d97a56fd9dd4": {
            "connections": {
              "Reject": "e301438c-0bd0-429c-ab0c-66126501069a",
              "Retry": "44cc2d56-24aa-4671-8ef8-b99e52a065b3"
            },
            "displayName": "Retry Limit Decision",
            "nodeType": "RetryLimitDecisionNode",
            "x": 1736.5,
            "y": 1487.01953125
          },
          "8f52da1e-b28d-4ce5-a77a-d797f1237e72": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Register Push MFA",
            "nodeType": "InnerTreeEvaluatorNode",
            "x": 1002,
            "y": 382.015625
          },
          "974a86b4-f951-4b35-978b-255dc7e7c94a": {
            "connections": {
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "PATCHED": "dfc8eb16-485b-499f-9d26-b5b1882b29b6"
            },
            "displayName": "Update User",
            "nodeType": "PatchObjectNode",
            "x": 1015,
            "y": 1018.015625
          },
          "9df13d2c-b18a-48eb-b2c4-fd8c334ca9f0": {
            "connections": {
              "Error": "e301438c-0bd0-429c-ab0c-66126501069a",
              "False": "4c57f922-30fc-4814-bce0-7090de73cb9a",
              "True": "2e4ce40b-54d0-43a0-8118-5ba91c064c05"
            },
            "displayName": "Twilio Identifier",
            "nodeType": "VerifyAuthIdentifierNode",
            "x": 638,
            "y": 1230.03125
          },
          "b14badff-3733-4044-b6a2-867cd64e6558": {
            "connections": {
              "outcome": "263a5020-051b-4333-97e1-31b4612d030d"
            },
            "displayName": "OTP SMS Sender",
            "nodeType": "OneTimePasswordSmsSenderNode",
            "x": 1383,
            "y": 845.03125
          },
          "b8f3f331-0b9e-4ddd-ae6e-07f84b09259c": {
            "connections": {
              "EMAIL_NOT_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "EMAIL_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Notify User On Email",
            "nodeType": "EmailTemplateNode",
            "x": 2469,
            "y": 630.015625
          },
          "b9328338-0df6-46c4-8392-73fee238c2a2": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Register OATH MFA",
            "nodeType": "InnerTreeEvaluatorNode",
            "x": 999,
            "y": 209.015625
          },
          "ba41ae63-5bbe-4b7b-a4e5-a90304d5537b": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "7942c6ca-65c5-499c-b95c-645309cbbc1c"
            },
            "displayName": "Register WebAuthn Method",
            "nodeType": "InnerTreeEvaluatorNode",
            "x": 970,
            "y": 63.03125
          },
          "dfc8eb16-485b-499f-9d26-b5b1882b29b6": {
            "connections": {
              "outcome": "b14badff-3733-4044-b6a2-867cd64e6558"
            },
            "displayName": "HOTP Generator",
            "nodeType": "OneTimePasswordGeneratorNode",
            "x": 1007,
            "y": 838.03125
          }
        },
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 2883,
            "y": 663.3333333333333
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 1435,
            "y": 1030.6666666666667
          },
          "startNode": {
            "x": 70,
            "y": 347.5
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "0d750deb-3604-4b55-a830-4d25317aeaa9": {
          "_id": "0d750deb-3604-4b55-a830-4d25317aeaa9",
          "_rev": "-1517748185",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "263a5020-051b-4333-97e1-31b4612d030d": {
          "_id": "263a5020-051b-4333-97e1-31b4612d030d",
          "_rev": "-1760371144",
          "nodes": [
            {
              "_id": "f30d2c47-6b99-4970-b8b8-5e12429c8b2c",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate OTP"
            },
            {
              "_id": "b09cc9d7-3c12-4151-b1ac-c5fa1d935e3a",
              "nodeType": "OneTimePasswordCollectorDecisionNode",
              "displayName": "OTP Collector Decision"
            }
          ],
          "pageDescription": {
            "en": "Enter the passcode you received."
          },
          "pageHeader": {
            "en": "Enter Passcode"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "2b779980-8038-4f29-ad31-a754b6baba01": {
          "_id": "2b779980-8038-4f29-ad31-a754b6baba01",
          "_rev": "697599429",
          "accountSID": "demo",
          "authToken": null,
          "channel": "CALL",
          "identifierSharedState": "userIdentifier",
          "serviceSID": "demo",
          "requestIdentifier": false,
          "_type": {
            "_id": "VerifyAuthSenderNode",
            "name": "Twilio Verify Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        },
        "2e4ce40b-54d0-43a0-8118-5ba91c064c05": {
          "_id": "2e4ce40b-54d0-43a0-8118-5ba91c064c05",
          "_rev": "-1233957321",
          "accountSID": "demo",
          "authToken": null,
          "identifierSharedState": "userIdentifier",
          "_type": {
            "_id": "VerifyAuthLookupNode",
            "name": "Twilio Verify Lookup",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "True",
              "displayName": "True"
            },
            {
              "id": "False",
              "displayName": "False"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "31e90931-3888-4de1-b426-0d6579c0d78f": {
          "_id": "31e90931-3888-4de1-b426-0d6579c0d78f",
          "_rev": "1357591549",
          "nodes": [
            {
              "_id": "59e7b1b9-8289-40c7-b621-da8f881c7372",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Get Allowed MFA methods"
            }
          ],
          "pageDescription": {
            "en": "Select an MFA method to use to sign on to your account."
          },
          "pageHeader": {
            "en": "Select Method"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "FIDO2",
              "displayName": "FIDO2"
            },
            {
              "id": "OATH",
              "displayName": "OATH"
            },
            {
              "id": "PUSH",
              "displayName": "PUSH"
            },
            {
              "id": "OATH+PUSH",
              "displayName": "OATH+PUSH"
            },
            {
              "id": "SMS",
              "displayName": "SMS"
            },
            {
              "id": "VOICE",
              "displayName": "VOICE"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "3a8af3f5-e1aa-4856-a059-17b1a39ee513": {
          "_id": "3a8af3f5-e1aa-4856-a059-17b1a39ee513",
          "_rev": "-1238038747",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "44cc2d56-24aa-4671-8ef8-b99e52a065b3": {
          "_id": "44cc2d56-24aa-4671-8ef8-b99e52a065b3",
          "_rev": "-1037481185",
          "script": "d7533919-235c-4548-99db-dd9cb33344ae",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "invalidCodeErrorMessage",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "4c57f922-30fc-4814-bce0-7090de73cb9a": {
          "_id": "4c57f922-30fc-4814-bce0-7090de73cb9a",
          "_rev": "602892987",
          "nodes": [
            {
              "_id": "49cd87a5-30ae-4684-80c2-09be4be055f9",
              "nodeType": "AttributeCollectorNode",
              "displayName": "Collect Phone Number"
            }
          ],
          "pageDescription": {
            "en": "Enter your mobile phone number, including the country code, to receive authentication passcodes."
          },
          "pageHeader": {
            "en": "Voice"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "5283a80c-0d77-4b10-b156-502241657a0c": {
          "_id": "5283a80c-0d77-4b10-b156-502241657a0c",
          "_rev": "1490029214",
          "tree": "Combined OATH And PUSH MFA Methods Registration - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "558e7b97-c2f7-4c85-8f51-1f20657f1659": {
          "_id": "558e7b97-c2f7-4c85-8f51-1f20657f1659",
          "_rev": "1101919980",
          "nodes": [
            {
              "_id": "10dc5c95-a53e-4199-a9e3-c856cc1d6eb6",
              "nodeType": "AttributeCollectorNode",
              "displayName": "Collect Phone Number"
            }
          ],
          "pageDescription": {
            "en": "Enter your mobile phone number, including the country code, to receive authentication passcodes."
          },
          "pageHeader": {
            "en": "Text Message"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "5820deb1-d71d-4754-97fc-cda5ee8b6416": {
          "_id": "5820deb1-d71d-4754-97fc-cda5ee8b6416",
          "_rev": "994702366",
          "identityAttribute": "userName",
          "identifier": "userName",
          "_type": {
            "_id": "IdentifyExistingUserNode",
            "name": "Identify Existing User",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "5db175d6-78ad-4020-87e7-8afae5e1a729": {
          "_id": "5db175d6-78ad-4020-87e7-8afae5e1a729",
          "_rev": "459683134",
          "nodes": [
            {
              "_id": "ca8d317c-8c99-477c-8846-2951000518bf",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate OTP"
            },
            {
              "_id": "52111389-b865-4220-8168-09f279cfa6c1",
              "nodeType": "VerifyAuthCollectorDecisionNode",
              "displayName": "Twilio Verify Collector Decision"
            }
          ],
          "pageDescription": {
            "en": "Enter the passcode you received."
          },
          "pageHeader": {
            "en": "Enter Passcode"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        },
        "7942c6ca-65c5-499c-b95c-645309cbbc1c": {
          "_id": "7942c6ca-65c5-499c-b95c-645309cbbc1c",
          "_rev": "368400715",
          "script": "7c93cb90-c43b-448b-893d-68de7019ccac",
          "outcomes": [
            "true",
            "Error"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id",
            "ciam_allowedMFATypes",
            "mfaDeviceType"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "7d4578b5-01e0-4c67-a9fb-2afdefbb0b54": {
          "_id": "7d4578b5-01e0-4c67-a9fb-2afdefbb0b54",
          "_rev": "-1174445878",
          "presentAttribute": "telephoneNumber",
          "identityAttribute": "userName",
          "_type": {
            "_id": "AttributePresentDecisionNode",
            "name": "Attribute Present Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "8b49bdc3-26e3-45e6-877d-297afcc55ac4": {
          "_id": "8b49bdc3-26e3-45e6-877d-297afcc55ac4",
          "_rev": "-677432216",
          "identityResource": "managed/alpha_user",
          "patchAsObject": false,
          "ignoredFields": [],
          "identityAttribute": "userName",
          "_type": {
            "_id": "PatchObjectNode",
            "name": "Patch Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "PATCHED",
              "displayName": "Patched"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        },
        "8e735644-4c63-4a53-9343-d97a56fd9dd4": {
          "_id": "8e735644-4c63-4a53-9343-d97a56fd9dd4",
          "_rev": "249395636",
          "incrementUserAttributeOnFailure": true,
          "retryLimit": 3,
          "_type": {
            "_id": "RetryLimitDecisionNode",
            "name": "Retry Limit Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "Retry",
              "displayName": "Retry"
            },
            {
              "id": "Reject",
              "displayName": "Reject"
            }
          ]
        },
        "8f52da1e-b28d-4ce5-a77a-d797f1237e72": {
          "_id": "8f52da1e-b28d-4ce5-a77a-d797f1237e72",
          "_rev": "-316104867",
          "tree": "Push MFA Method Registration - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "974a86b4-f951-4b35-978b-255dc7e7c94a": {
          "_id": "974a86b4-f951-4b35-978b-255dc7e7c94a",
          "_rev": "-294289259",
          "identityResource": "managed/alpha_user",
          "patchAsObject": false,
          "ignoredFields": [],
          "identityAttribute": "userName",
          "_type": {
            "_id": "PatchObjectNode",
            "name": "Patch Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "PATCHED",
              "displayName": "Patched"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        },
        "9df13d2c-b18a-48eb-b2c4-fd8c334ca9f0": {
          "_id": "9df13d2c-b18a-48eb-b2c4-fd8c334ca9f0",
          "_rev": "1144009043",
          "identifierAttribute": "telephoneNumber",
          "identifierSharedState": "userIdentifier",
          "_type": {
            "_id": "VerifyAuthIdentifierNode",
            "name": "Twilio Identifier",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "True",
              "displayName": "True"
            },
            {
              "id": "False",
              "displayName": "False"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "b14badff-3733-4044-b6a2-867cd64e6558": {
          "_id": "b14badff-3733-4044-b6a2-867cd64e6558",
          "_rev": "-1788678849",
          "secretLabelIdentifier": "demo",
          "hostName": "demo",
          "hostPort": 465,
          "mobilePhoneAttributeName": "telephoneNumber",
          "smsSubject": {
            "en": "AIC: New authentication request"
          },
          "username": "demo",
          "fromEmailAddress": "demo",
          "smsContent": {
            "en": "Your passcode is: {{OTP}}"
          },
          "smsGatewayImplementationClass": "com.sun.identity.authentication.modules.hotp.DefaultSMSGatewayImpl",
          "sslOption": "SSL",
          "_type": {
            "_id": "OneTimePasswordSmsSenderNode",
            "name": "OTP SMS Sender",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "b8f3f331-0b9e-4ddd-ae6e-07f84b09259c": {
          "_id": "b8f3f331-0b9e-4ddd-ae6e-07f84b09259c",
          "_rev": "-1622935903",
          "emailTemplateName": "deviceRegistration",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "_type": {
            "_id": "EmailTemplateNode",
            "name": "Email Template Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL_SENT",
              "displayName": "Email Sent"
            },
            {
              "id": "EMAIL_NOT_SENT",
              "displayName": "Email Not Sent"
            }
          ]
        },
        "b9328338-0df6-46c4-8392-73fee238c2a2": {
          "_id": "b9328338-0df6-46c4-8392-73fee238c2a2",
          "_rev": "1924390695",
          "tree": "OATH Registration - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "ba41ae63-5bbe-4b7b-a4e5-a90304d5537b": {
          "_id": "ba41ae63-5bbe-4b7b-a4e5-a90304d5537b",
          "_rev": "-1054923828",
          "tree": "WebAuthn MFA Method Registration - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "dfc8eb16-485b-499f-9d26-b5b1882b29b6": {
          "_id": "dfc8eb16-485b-499f-9d26-b5b1882b29b6",
          "_rev": "1960309573",
          "length": 6,
          "_type": {
            "_id": "OneTimePasswordGeneratorNode",
            "name": "HOTP Generator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        }
      },
      "innerNodes": {
        "f30d2c47-6b99-4970-b8b8-5e12429c8b2c": {
          "_id": "f30d2c47-6b99-4970-b8b8-5e12429c8b2c",
          "_rev": "-1406261223",
          "script": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage",
            "/*   - Data made available by nodes that have already executed are available in the sharedState variable.   - The script should set outcome to either \"true\" or \"false\".  */  /*     - Script Inputs: \"oneTimePassword\", \"invalidCodeErrorMessage\"     - Script Outputs: \"errorMessage\", \"errorDetails\", \"invalidCodeErrorMessage\"     - Outcomes: \"true\" */  // Note: If HOTP Genrator node is used in prior, \"oneTimePassword\" will be a transient state property, make sure to make it available in script inputs.  // If the OTP is generated by Twilio nodes, the default length is set to 6 and only digits are considered. Modify this if necessary.  try {     function validateInput(otpLength) {         return String(\" \\n\\                     var otpLength = \" + otpLength + \" \\n\\                     const submitBtn = document.querySelectorAll('button[type=\\\"submit\\\"]')[0]; \\n\\                     if (submitBtn) submitBtn.disabled = true; \\n\\                     // Validate the passcode \\n\\                     function validateCode() { \\n\\                         const passcode = document.querySelectorAll('input[data-vv-as=\\\"One Time Password\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\"Code\\\"]')[0]; \\n\\                         if (passcode) { \\n\\                             // Set input properties to prevent user tampering \\n\\                             passcode.setAttribute('maxlength', otpLength); \\n\\                             passcode.setAttribute('pattern', '[0-9]{' + otpLength + '}'); \\n\\                             passcode.setAttribute('inputmode', 'numeric'); \\n\\                             // Check if the input is exactly 6 digits long and numeric \\n\\                             const isValidCode = new RegExp('^[0-9]{' + otpLength + '}$').test(passcode.value); \\n\\                             submitBtn.disabled = !isValidCode; \\n\\                             return isValidCode; \\n\\                         } \\n\\                         return false; \\n\\                     }; \\n\\                     \\n\\                     function go(obs) { \\n\\                         const passcode = document.querySelectorAll('input[data-vv-as=\\\"One Time Password\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\"Code\\\"]')[0]; \\n\\                         if (passcode && submitBtn) { \\n\\                             passcode.addEventListener('input', validateCode); \\n\\                             submitBtn.addEventListener('click', (event) => { \\n\\                                 if (!validateCode()) { \\n\\                                     event.preventDefault(); \\n\\                                     submitBtn.disabled = true; \\n\\                                 } \\n\\                             }); \\n\\                             if (obs) obs.disconnect(); \\n\\                             return; \\n\\                         } \\n\\                     } \\n\\                     \\n\\                     // For HOTP and Twilio OTP collector nodes, if either of the element is present, initialize validation \\n\\                     if (document.querySelectorAll('input[data-vv-as=\\\"One Time Password\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\"Code\\\"]')[0]) go(); \\n\\                     else { \\n\\                         const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\n\\                         observer.observe(document, { childList: true, subtree: true }); \\n\\                     } \\n\\         \");     }      var invalidCodeErrorMessage = nodeState.get(\"invalidCodeErrorMessage\");     nodeState.putShared(\"invalidCodeErrorMessage\", \"\");      // Get \"oneTimePassword\" shared in transient state by the HOTP Generator node or default it to 6     var otpLength = nodeState.get(\"oneTimePassword\") ? nodeState.get(\"oneTimePassword\").length : 6;          if (callbacks.isEmpty()) {         // Display error message if invalid code entered by user         if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);         // Request callbacks         callbacksBuilder.scriptTextOutputCallback(validateInput(otpLength));     }     // Go to true path     action.goTo(\"true\"); } catch (e) {     // User-friendly error message     nodeState.putShared(\"errorMessage\", \"An error has occurred. Contact support.\");     // Detailed error information for debugging     nodeState.putShared(\"errorDetails\", e.toString());     // Go to Error       action.goTo(\"Error\"); }"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "b09cc9d7-3c12-4151-b1ac-c5fa1d935e3a": {
          "_id": "b09cc9d7-3c12-4151-b1ac-c5fa1d935e3a",
          "_rev": "2023408051",
          "passwordExpiryTime": 5,
          "_type": {
            "_id": "OneTimePasswordCollectorDecisionNode",
            "name": "OTP Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "59e7b1b9-8289-40c7-b621-da8f881c7372": {
          "_id": "59e7b1b9-8289-40c7-b621-da8f881c7372",
          "_rev": "1252090223",
          "script": "2a43b67f-1dad-42ae-95b2-5ef022f59f64",
          "outcomes": [
            "FIDO2",
            "OATH",
            "PUSH",
            "OATH+PUSH",
            "SMS",
            "VOICE",
            "Error"
          ],
          "outputs": [
            "mfaDeviceType",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "ciam_allowedMFATypes"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "FIDO2",
              "displayName": "FIDO2"
            },
            {
              "id": "OATH",
              "displayName": "OATH"
            },
            {
              "id": "PUSH",
              "displayName": "PUSH"
            },
            {
              "id": "OATH+PUSH",
              "displayName": "OATH+PUSH"
            },
            {
              "id": "SMS",
              "displayName": "SMS"
            },
            {
              "id": "VOICE",
              "displayName": "VOICE"
            },
            {
              "id": "Error",
              "displayName": "Error"
            }
          ]
        },
        "49cd87a5-30ae-4684-80c2-09be4be055f9": {
          "_id": "49cd87a5-30ae-4684-80c2-09be4be055f9",
          "_rev": "-1277038388",
          "attributesToCollect": [
            "telephoneNumber"
          ],
          "identityAttribute": "userName",
          "validateInputs": true,
          "required": true,
          "_type": {
            "_id": "AttributeCollectorNode",
            "name": "Attribute Collector",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "10dc5c95-a53e-4199-a9e3-c856cc1d6eb6": {
          "_id": "10dc5c95-a53e-4199-a9e3-c856cc1d6eb6",
          "_rev": "-911391154",
          "attributesToCollect": [
            "telephoneNumber"
          ],
          "identityAttribute": "userName",
          "validateInputs": true,
          "required": true,
          "_type": {
            "_id": "AttributeCollectorNode",
            "name": "Attribute Collector",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "ca8d317c-8c99-477c-8846-2951000518bf": {
          "_id": "ca8d317c-8c99-477c-8846-2951000518bf",
          "_rev": "-187129976",
          "script": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails",
            "invalidCodeErrorMessage"
          ],
          "inputs": [
            "invalidCodeErrorMessage"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "52111389-b865-4220-8168-09f279cfa6c1": {
          "_id": "52111389-b865-4220-8168-09f279cfa6c1",
          "_rev": "-418313616",
          "hideCode": true,
          "identifierSharedState": "userIdentifier",
          "_type": {
            "_id": "VerifyAuthCollectorDecisionNode",
            "name": "Twilio Verify Collector Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            },
            {
              "id": "error",
              "displayName": "Error"
            }
          ]
        }
      },
      "scripts": {
        "d7533919-235c-4548-99db-dd9cb33344ae": {
          "_id": "d7533919-235c-4548-99db-dd9cb33344ae",
          "name": "Threat Detection - Set Invalid code error message",
          "description": "Script to set invalid code error message",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"invalidCodeErrorMessage\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Set the below error message in shared state, can be displayed on the last UI Node\\n\\ntry {\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"Invalid Code\\\");\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "7c93cb90-c43b-448b-893d-68de7019ccac": {
          "_id": "7c93cb90-c43b-448b-893d-68de7019ccac",
          "name": "Threat Detection - Set MFA device in user's profile",
          "description": "Script to register MFA device/method in user's profile, script should be executed after verification of a respective MFA device/method",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"_id\\\", \\\"ciam_allowedMFATypes\\\", \\\"mfaDeviceType\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\", \\\"Error\\\"\\n*/\\n\\n// Caution: This script might auto-enroll the \\\"EMAIL\\\" as a MFA method in user's profile\\n\\ntry {\\n    // Retrieve userId and allowedMFATypes from shared state\\n    var userId = nodeState.get(\\\"_id\\\");\\n    var allowedMFAMethods = nodeState.get(\\\"ciam_allowedMFATypes\\\");\\n    \\n    // Read the user's MFA devices from the directory\\n    var mfaDevicesObj = openidm.read(\\\"managed/alpha_user/\\\" + userId, null, [\\\"custom_mfaDevices\\\"]);\\n    var mfaDevices = (mfaDevicesObj && mfaDevicesObj.custom_mfaDevices) ? mfaDevicesObj.custom_mfaDevices : [];\\n    \\n    // Parse the MFA devices into a usable array\\n    var usableMFADevices = [];\\n    mfaDevices.forEach(device => {\\n        usableMFADevices.push(device);\\n    });\\n    \\n    var emailMFAAllowed = false;\\n    \\n    // Check if EMAIL MFA is allowed\\n    allowedMFAMethods.forEach(method => {\\n        if (method === \\\"EMAIL\\\") emailMFAAllowed = true;\\n    });\\n    \\n    // Caution: By default, add EMAIL to the MFA devices list if it's allowed and not already present\\n    if (emailMFAAllowed && !usableMFADevices.includes(\\\"EMAIL\\\")) {\\n        usableMFADevices.push(\\\"EMAIL\\\");\\n    }\\n    \\n    // Get the selected device type from shared state\\n    var selectedDevice = nodeState.get(\\\"mfaDeviceType\\\");\\n    \\n    // Handle device registration based on the selected device type\\n    // If Admin wants a single FIDO2 device that a user can register and authenticate with, \\n    // change the node configuration in the WebAuthn Inner Journey and the below condition\\n    if (!usableMFADevices.includes(selectedDevice) || selectedDevice === \\\"FIDO2\\\") {\\n        // Handle combined MFA registration for OATH+PUSH if both are unregistered\\n        if (selectedDevice === \\\"OATH+PUSH\\\") {\\n            if(!usableMFADevices.includes(\\\"OATH\\\") && !usableMFADevices.includes(\\\"PUSH\\\")) {\\n                usableMFADevices.push(\\\"OATH\\\");\\n                usableMFADevices.push(\\\"PUSH\\\");\\n            } else {\\n                // OATH or PUSH device already registered for user, this option can't be use to register device again\\n                // If either of OATH or PUSH is registered and user want to register the other method from OATH/PUSH, \\n                // Use separate OATH and PUSH paths for registration\\n                nodeState.putShared(\\\"errorMessage\\\", \\\"An unexpected error occurred, please contact support team.\\\");\\n            }\\n        } else {\\n            usableMFADevices.push(selectedDevice);\\n        }\\n    }\\n    \\n    // Update the user's custom_mfaDevices attribute\\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_mfaDevices\\\", \\\"value\\\":usableMFADevices}]);\\n\\n    // Update the custom_latestMFADevice variable to store the selected device, it will be used in the notification template\\n    var latestMFADevice = selectedDevice;\\n    if(selectedDevice === \\\"OATH+PUSH\\\") latestMFADevice = \\\"OATH & Push\\\";\\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_latestMFADevice\\\", \\\"value\\\":latestMFADevice}]);\\n    // Set the outcome to true\\n    action.goTo(\\\"true\\\");   \\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "ee3e8507-00ff-48e8-a861-ea3a87a0c278": {
          "_id": "ee3e8507-00ff-48e8-a861-ea3a87a0c278",
          "name": "Threat Detection - Validate OTP input",
          "description": "Script to validate OTP input, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"oneTimePassword\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\", \\\"invalidCodeErrorMessage\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Note: If HOTP Genrator node is used in prior, \\\"oneTimePassword\\\" will be a transient state property, make sure to make it available in script inputs. \\n// If the OTP is generated by Twilio nodes, the default length is set to 6 and only digits are considered. Modify this if necessary.\\n\\ntry {\\n    function validateInput(otpLength) {\\n        return String(\\\" \\\\n\\\\\\n                    var otpLength = \\\" + otpLength + \\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    // Validate the passcode \\\\n\\\\\\n                    function validateCode() { \\\\n\\\\\\n                        const passcode = document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (passcode) { \\\\n\\\\\\n                            // Set input properties to prevent user tampering \\\\n\\\\\\n                            passcode.setAttribute('maxlength', otpLength); \\\\n\\\\\\n                            passcode.setAttribute('pattern', '[0-9]{' + otpLength + '}'); \\\\n\\\\\\n                            passcode.setAttribute('inputmode', 'numeric'); \\\\n\\\\\\n                            // Check if the input is exactly 6 digits long and numeric \\\\n\\\\\\n                            const isValidCode = new RegExp('^[0-9]{' + otpLength + '}$').test(passcode.value); \\\\n\\\\\\n                            submitBtn.disabled = !isValidCode; \\\\n\\\\\\n                            return isValidCode; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        return false; \\\\n\\\\\\n                    }; \\\\n\\\\\\n                    \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const passcode = document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (passcode && submitBtn) { \\\\n\\\\\\n                            passcode.addEventListener('input', validateCode); \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                if (!validateCode()) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    // For HOTP and Twilio OTP collector nodes, if either of the element is present, initialize validation \\\\n\\\\\\n                    if (document.querySelectorAll('input[data-vv-as=\\\\\\\"One Time Password\\\\\\\"]')[0] || document.querySelectorAll('input[data-vv-as=\\\\\\\"Code\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                    else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                    } \\\\n\\\\\\n        \\\");\\n    }\\n\\n    var invalidCodeErrorMessage = nodeState.get(\\\"invalidCodeErrorMessage\\\");\\n    nodeState.putShared(\\\"invalidCodeErrorMessage\\\", \\\"\\\");\\n\\n    // Get \\\"oneTimePassword\\\" shared in transient state by the HOTP Generator node or default it to 6\\n    var otpLength = nodeState.get(\\\"oneTimePassword\\\") ? nodeState.get(\\\"oneTimePassword\\\").length : 6;\\n    \\n    if (callbacks.isEmpty()) {\\n        // Display error message if invalid code entered by user\\n        if (invalidCodeErrorMessage && invalidCodeErrorMessage.length) callbacksBuilder.textOutputCallback(2, invalidCodeErrorMessage);\\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput(otpLength));\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "2a43b67f-1dad-42ae-95b2-5ef022f59f64": {
          "_id": "2a43b67f-1dad-42ae-95b2-5ef022f59f64",
          "name": "Threat Detection - Get available MFA methods",
          "description": "Script to fetch available MFA methods that a user can register with",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"ciam_allowedMFATypes\\\"\\n    - Script Outputs: \\\"mfaDeviceType\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\", \\\"Error\\\"\\n*/\\n\\ntry {\\n    // Get allowed MFA types from shared state\\n    var allowedMFAMethods = nodeState.get(\\\"ciam_allowedMFATypes\\\");\\n\\n    // Create an array storing usableMFAMethods\\n    var usableMFAMethods = [];\\n    \\n    allowedMFAMethods.forEach(device => {\\n        usableMFAMethods.push(device);\\n    });\\n    \\n    // Email verification is done in parent journey, can be used directly during MFA authentication\\n    // Scrubbing \\\"EMAIL\\\" device type, if available in usableMFAMethods\\n    if (usableMFAMethods.includes(\\\"EMAIL\\\")) {\\n        var index = usableMFAMethods.indexOf(\\\"EMAIL\\\");\\n        if (index > -1) usableMFAMethods.splice(index, 1);\\n    }\\n    \\n    // Combined registration for OATH & Push, if both OATH & Push are allowed MFA types\\n    if(usableMFAMethods.includes(\\\"OATH\\\") && usableMFAMethods.includes(\\\"PUSH\\\")) usableMFAMethods.push(\\\"OATH+PUSH\\\");\\n    \\n    // Handle callback logic\\n    if (callbacks.isEmpty()) {\\n      callbacksBuilder.choiceCallback(\\\"Select an MFA device\\\", usableMFAMethods, 0, false);\\n    } else {\\n      // Callbacks returned from browser, save selected choice\\n      var index = callbacks.getChoiceCallbacks().get(0)[0];\\n      var selectedDevice = usableMFAMethods[index] || null;\\n    \\n      if (!selectedDevice) {\\n        nodeState.putShared(\\\"errorMessage\\\", \\\"An unexpected error occurred, please contact support team\\\");\\n        // Go to Error\\n        action.goTo(\\\"Error\\\");\\n      } else {  \\n        nodeState.putShared(\\\"mfaDeviceType\\\", selectedDevice);\\n        // Go to selected device path\\n        action.goTo(selectedDevice);\\n      }\\n    }\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {
        "deviceRegistration": {
          "_id": "emailTemplate/deviceRegistration",
          "advancedEditor": true,
          "defaultLocale": "en",
          "description": "This will be sent to users when a new MFA device is registered.",
          "displayName": "Device Registration FIDO",
          "enabled": true,
          "from": "",
          "html": {
            "en": ""
          },
          "message": {
            "en": "<div style=\"display:block;text-align:center;font-family:'Arial',\n  sans-serif;background-color:#f7f7f7;border:1px solid #e3e3e3;border-radius:10px;box-shadow:0 4px 8px rgba(0, 0, 0, 0.1);width:400px;margin:20px 20px;padding:30px 20px\">\n  <img src=\"https://assets.pingone.com/ux/ui-library/5.0.2/images/logo-pingidentity.png\" alt=\"Company Logo\" style=\"height:65px;margin-bottom:10px\" />\n  <h2 style=\"color:#333;font-size:24px;margin:20px 0\">Sign On Device Added </h2>\n  <p style=\"margin:20px 0 20px;font-size:16px;color:#555\">The following device was successfully added to your\n    account and can be used to authenticate. </p>\n  <p style=\"margin:20px 0 20px;font-size:20px;color:#222\">{{object.custom_latestMFADevice}}</p>\n  <p style=\"margin:20px 0 20px;font-size:16px;color:#555\">If you added this device, no further action is needed. </p>\n  <p style=\"margin:20px 0 20px;font-size:16px;color:#555\">If this device wasn't added by you, consider resetting\n    your password to secure your account. </p>\n</div>\n"
          },
          "mimeType": "text/html",
          "styles": "body {\n   background-color: #324054;\n   color: #455469;\n   padding: 60px;\n   text-align: center \n}\n a {\n   text-decoration: none;\n   color: #109cf1;\n}\n .content {\n   background-color: #fff;\n   border-radius: 4px;\n   margin: 0 auto;\n   padding: 48px;\n   width: 235px \n}\n",
          "subject": {
            "en": "New authentication device added"
          },
          "templateId": "deviceRegistration"
        }
      },
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    },
    "Threat Detection Journey with PingOne Protect": {
      "tree": {
        "_id": "Threat Detection Journey with PingOne Protect",
        "_rev": "2104152292",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Threat Detection\"]"
        },
        "entryNodeId": "de286919-6e98-4a9e-859f-6e86ed11d212",
        "innerTreeOnly": false,
        "nodes": {
          "01285823-fca4-49b4-850e-5519ede1d21d": {
            "x": 180,
            "y": 1020.03125,
            "connections": {
              "true": "f75ce75e-959f-4684-9cd3-5eccf9cbe75d"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set p1ProtectAction As Init"
          },
          "0a4a0329-376a-41db-b05a-6d88a5c75f4e": {
            "x": 165,
            "y": 52.015625,
            "connections": {
              "false": "1d330623-d624-4a92-a286-484e5e91277a",
              "true": "57aa078c-d8ff-4bed-9b88-286c0d7d0c2f"
            },
            "nodeType": "InnerTreeEvaluatorNode",
            "displayName": "Protect Evaluation & Mitigation"
          },
          "0b04a2c7-21af-47df-baae-880000a94423": {
            "x": 198,
            "y": 504.015625,
            "connections": {
              "localAuthentication": "0cb0ca30-6b20-4e8c-a5d2-2817fca0932c",
              "socialAuthentication": "82268cd3-3139-4136-be72-2d2c676990e3"
            },
            "nodeType": "PageNode",
            "displayName": "Page Node"
          },
          "1d330623-d624-4a92-a286-484e5e91277a": {
            "x": 1543,
            "y": 651.03125,
            "connections": {
              "outcome": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "product-PingOneProtectResultNode",
            "displayName": "Update P1 Protect Eval Failure"
          },
          "212b2a85-54ca-418e-aabe-0322b34ee052": {
            "x": 536.203125,
            "y": 114.015625,
            "connections": {
              "false": "65368b39-2dae-43ac-999a-0b373780b4e2",
              "true": "d4d85de2-09ec-42bd-9a27-6d119f0c8c88"
            },
            "nodeType": "AttributeValueDecisionNode",
            "displayName": "Is Email Verified?"
          },
          "2293a2b1-1fe6-4013-a10f-f99c69f8437c": {
            "x": 176,
            "y": 1145.03125,
            "connections": {
              "true": "01285823-fca4-49b4-850e-5519ede1d21d"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set flowType As Authentication"
          },
          "3b420c82-80ec-43b9-b2d2-9ec77fa42d32": {
            "x": 1628,
            "y": 1271.421875,
            "connections": {
              "false": "2ee63a92-f470-4910-a25b-f164e5da7bd3",
              "true": "c5e0b647-f936-4554-8584-fd63729d4311"
            },
            "nodeType": "InnerTreeEvaluatorNode",
            "displayName": "MFA Registration"
          },
          "3bea3f78-23b7-4249-9dcc-b0583f54392e": {
            "x": 1154,
            "y": 7.015625,
            "connections": {
              "false": "89ce033d-ea45-434f-bdb2-ce1f924e04da",
              "true": "593ce86d-5796-4f50-bba4-75e5f8219ee1"
            },
            "nodeType": "TermsAndConditionsDecisionNode",
            "displayName": "Terms and Conditions Decision"
          },
          "4bef992a-b9c5-4f86-a4c9-c02030680a2b": {
            "x": 601,
            "y": 1080.421875,
            "connections": {
              "false": "a2aa29d0-5466-47b6-aede-412bcc5c6dd2",
              "true": "829b4f7e-1ab3-443a-9a3d-815496865502"
            },
            "nodeType": "RequiredAttributesDecisionNode",
            "displayName": "Required Attributes Present"
          },
          "57aa078c-d8ff-4bed-9b88-286c0d7d0c2f": {
            "x": 566.15625,
            "y": 594.015625,
            "connections": {
              "CANCELLED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "EXPIRED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "FALSE": "e301438c-0bd0-429c-ab0c-66126501069a",
              "LOCKED": "e301438c-0bd0-429c-ab0c-66126501069a",
              "TRUE": "d2a3c77b-1bff-4221-99f1-be18dcc19090"
            },
            "nodeType": "IdentityStoreDecisionNode",
            "displayName": "Identity Store Decision"
          },
          "593ce86d-5796-4f50-bba4-75e5f8219ee1": {
            "x": 1485,
            "y": 100.03125,
            "connections": {
              "outcome": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "product-PingOneProtectResultNode",
            "displayName": "Update P1 Protect Eval Success"
          },
          "65368b39-2dae-43ac-999a-0b373780b4e2": {
            "x": 528,
            "y": 6.03125,
            "connections": {
              "outcome": "f30290ec-a1d6-4376-96ad-af0800cca7fd"
            },
            "nodeType": "EmailSuspendNode",
            "displayName": "Email Suspend Node"
          },
          "6709d20f-d15b-481a-aebb-2b1cfab90957": {
            "x": 910,
            "y": 801.03125,
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "AccountActiveDecisionNode",
            "displayName": "Account Active Decision"
          },
          "76d720ff-73e9-482c-adf9-4724f7b71b60": {
            "x": 943,
            "y": 1086.921875,
            "connections": {
              "CREATED": "ae7268ad-116d-4a2c-9110-22a299f20837",
              "FAILURE": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "CreateObjectNode",
            "displayName": "Create Object"
          },
          "82268cd3-3139-4136-be72-2d2c676990e3": {
            "x": 594.15625,
            "y": 827.015625,
            "connections": {
              "ACCOUNT_EXISTS": "6709d20f-d15b-481a-aebb-2b1cfab90957",
              "NO_ACCOUNT": "4bef992a-b9c5-4f86-a4c9-c02030680a2b",
              "SOCIAL_AUTH_INTERRUPTED": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "SocialProviderHandlerNodeV2",
            "displayName": "Social Provider Handler Node"
          },
          "829b4f7e-1ab3-443a-9a3d-815496865502": {
            "x": 921,
            "y": 1239.921875,
            "connections": {
              "outcome": "76d720ff-73e9-482c-adf9-4724f7b71b60"
            },
            "nodeType": "PageNode",
            "displayName": "Create Profile Social Reg"
          },
          "8923efcd-80a8-42ae-871a-46403a5fa194": {
            "x": 1194,
            "y": 268.015625,
            "connections": {
              "FAILURE": "1d330623-d624-4a92-a286-484e5e91277a",
              "PATCHED": "593ce86d-5796-4f50-bba4-75e5f8219ee1"
            },
            "nodeType": "PatchObjectNode",
            "displayName": "Patch Object"
          },
          "89ce033d-ea45-434f-bdb2-ce1f924e04da": {
            "x": 1171,
            "y": 150.015625,
            "connections": {
              "outcome": "8923efcd-80a8-42ae-871a-46403a5fa194"
            },
            "nodeType": "AcceptTermsAndConditionsNode",
            "displayName": "Accept Terms and Conditions"
          },
          "a2aa29d0-5466-47b6-aede-412bcc5c6dd2": {
            "x": 639,
            "y": 1243.421875,
            "connections": {
              "true": "829b4f7e-1ab3-443a-9a3d-815496865502"
            },
            "nodeType": "PageNode",
            "displayName": "Create Profile Social Reg"
          },
          "c6b1586e-a98f-40f3-9022-171bf224c798": {
            "x": 1263,
            "y": 1162.421875,
            "connections": {
              "true": "3b420c82-80ec-43b9-b2d2-9ec77fa42d32"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Email Ver. Status To True"
          },
          "cd664fcc-06ec-4b3f-aeba-d69a98e3f346": {
            "x": 183,
            "y": 1265.03125,
            "connections": {
              "false": "0b04a2c7-21af-47df-baae-880000a94423",
              "true": "2293a2b1-1fe6-4013-a10f-f99c69f8437c"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Is Protect Analysis Required?"
          },
          "d2a3c77b-1bff-4221-99f1-be18dcc19090": {
            "x": 559,
            "y": 420.015625,
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "212b2a85-54ca-418e-aabe-0322b34ee052"
            },
            "nodeType": "AccountActiveDecisionNode",
            "displayName": "Account Active Decision"
          },
          "d39972ca-0d61-45b1-b303-f8c20694d6cf": {
            "x": 187.42857142857144,
            "y": 1426.8080357142858,
            "connections": {
              "true": "cd664fcc-06ec-4b3f-aeba-d69a98e3f346"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Prerequisites & Init Variables"
          },
          "d4d85de2-09ec-42bd-9a27-6d119f0c8c88": {
            "x": 801,
            "y": 133.015625,
            "connections": {
              "false": "3bea3f78-23b7-4249-9dcc-b0583f54392e",
              "true": "f3bdeddc-f2bc-4b0e-a0ca-0166e149c3e1"
            },
            "nodeType": "AuthLevelDecisionNode",
            "displayName": "Auth Level Decision"
          },
          "eda29daf-f00f-4058-a69b-3b337536fb91": {
            "x": 173,
            "y": 229.015625,
            "connections": {
              "true": "0a4a0329-376a-41db-b05a-6d88a5c75f4e"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set p1ProtectAction As Eval"
          },
          "f30290ec-a1d6-4376-96ad-af0800cca7fd": {
            "x": 807,
            "y": 15.03125,
            "connections": {
              "true": "d4d85de2-09ec-42bd-9a27-6d119f0c8c88"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Set Email Ver. Status To True"
          },
          "f3bdeddc-f2bc-4b0e-a0ca-0166e149c3e1": {
            "x": 988,
            "y": 269.015625,
            "connections": {
              "false": "1d330623-d624-4a92-a286-484e5e91277a",
              "true": "3bea3f78-23b7-4249-9dcc-b0583f54392e"
            },
            "nodeType": "InnerTreeEvaluatorNode",
            "displayName": "MFA Authentication"
          },
          "f75ce75e-959f-4684-9cd3-5eccf9cbe75d": {
            "x": 206,
            "y": 860.03125,
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "0b04a2c7-21af-47df-baae-880000a94423"
            },
            "nodeType": "InnerTreeEvaluatorNode",
            "displayName": "Initialize P1 Protect"
          },
          "de286919-6e98-4a9e-859f-6e86ed11d212": {
            "x": 192,
            "y": 1548.03125,
            "connections": {
              "DONE": "d39972ca-0d61-45b1-b303-f8c20694d6cf"
            },
            "nodeType": "PollingWaitNode",
            "displayName": "Polling Wait Node"
          },
          "0cb0ca30-6b20-4e8c-a5d2-2817fca0932c": {
            "x": 178,
            "y": 342.03125,
            "connections": {
              "true": "eda29daf-f00f-4058-a69b-3b337536fb91",
              "false": "57aa078c-d8ff-4bed-9b88-286c0d7d0c2f"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Is Protect Analysis Required?"
          },
          "ae7268ad-116d-4a2c-9110-22a299f20837": {
            "x": 1276,
            "y": 1424.03125,
            "connections": {
              "outcome": "7be35b6e-4fe7-4741-8a86-e7e7f83dbc47"
            },
            "nodeType": "AccountLockoutNode",
            "displayName": "Disable User's Account"
          },
          "7be35b6e-4fe7-4741-8a86-e7e7f83dbc47": {
            "x": 1284.3125,
            "y": 1268.03125,
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "c6b1586e-a98f-40f3-9022-171bf224c798"
            },
            "nodeType": "IdentifyExistingUserNode",
            "displayName": "Identify Existing User"
          },
          "2ee63a92-f470-4910-a25b-f164e5da7bd3": {
            "x": 1627,
            "y": 1426.03125,
            "connections": {
              "true": "e301438c-0bd0-429c-ab0c-66126501069a"
            },
            "nodeType": "ScriptedDecisionNode",
            "displayName": "Delete User Entry"
          },
          "c5e0b647-f936-4554-8584-fd63729d4311": {
            "x": 1623,
            "y": 1166.03125,
            "connections": {
              "outcome": "f68336f6-1317-492e-a693-d3586c7f49a2"
            },
            "nodeType": "AccountLockoutNode",
            "displayName": "Enable User's Account"
          },
          "f68336f6-1317-492e-a693-d3586c7f49a2": {
            "x": 1619,
            "y": 1004.03125,
            "connections": {
              "EMAIL_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "EMAIL_NOT_SENT": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "nodeType": "EmailTemplateNode",
            "displayName": "Notify User On Email"
          }
        },
        "staticNodes": {
          "startNode": {
            "x": 32,
            "y": 210
          },
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 2143,
            "y": 98
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 2040,
            "y": 829
          }
        },
        "mustRun": false,
        "enabled": true
      },
      "nodes": {
        "01285823-fca4-49b4-850e-5519ede1d21d": {
          "_id": "01285823-fca4-49b4-850e-5519ede1d21d",
          "_rev": "-46992547",
          "script": "47616408-11a3-485c-8d34-b7eac1383a58",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "p1ProtectAction",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "0a4a0329-376a-41db-b05a-6d88a5c75f4e": {
          "_id": "0a4a0329-376a-41db-b05a-6d88a5c75f4e",
          "_rev": "-2006946337",
          "tree": "Threat Detection - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "0b04a2c7-21af-47df-baae-880000a94423": {
          "_id": "0b04a2c7-21af-47df-baae-880000a94423",
          "_rev": "972769230",
          "nodes": [
            {
              "_id": "f7fb5574-005e-4c5d-9678-f9724eab9e7e",
              "nodeType": "ValidatedUsernameNode",
              "displayName": "Platform Username"
            },
            {
              "_id": "85584d3e-23ff-4d5e-baac-28790d0576bb",
              "nodeType": "ValidatedPasswordNode",
              "displayName": "Platform Password"
            },
            {
              "_id": "9521836a-245f-4105-9e23-4a8c389f0252",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Inputs"
            },
            {
              "_id": "37d99565-2bb2-4f66-a683-de4ba965a73c",
              "nodeType": "SelectIdPNode",
              "displayName": "Select Identity Provider"
            }
          ],
          "pageDescription": {},
          "stage": "{\"submitButtonText\":{\"en\":\"Sign In\"}}",
          "pageHeader": {
            "en": "Sign In"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "socialAuthentication",
              "displayName": "Social Authentication"
            },
            {
              "id": "localAuthentication",
              "displayName": "Local Authentication"
            }
          ]
        },
        "1d330623-d624-4a92-a286-484e5e91277a": {
          "_id": "1d330623-d624-4a92-a286-484e5e91277a",
          "_rev": "-1125934027",
          "status": "FAILED",
          "_type": {
            "_id": "product-PingOneProtectResultNode",
            "name": "PingOne Protect Result",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "212b2a85-54ca-418e-aabe-0322b34ee052": {
          "_id": "212b2a85-54ca-418e-aabe-0322b34ee052",
          "_rev": "1067040023",
          "comparisonValue": "true",
          "comparisonOperation": "EQUALS",
          "identityAttribute": "userName",
          "comparisonAttribute": "custom_emailVerified",
          "_type": {
            "_id": "AttributeValueDecisionNode",
            "name": "Attribute Value Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "2293a2b1-1fe6-4013-a10f-f99c69f8437c": {
          "_id": "2293a2b1-1fe6-4013-a10f-f99c69f8437c",
          "_rev": "461114057",
          "script": "3453f878-5d62-41d1-b816-cfc272217853",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "flowType",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "3b420c82-80ec-43b9-b2d2-9ec77fa42d32": {
          "_id": "3b420c82-80ec-43b9-b2d2-9ec77fa42d32",
          "_rev": "-296408640",
          "tree": "MFA Device Registration - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "3bea3f78-23b7-4249-9dcc-b0583f54392e": {
          "_id": "3bea3f78-23b7-4249-9dcc-b0583f54392e",
          "_rev": "-1892091464",
          "identityAttribute": "userName",
          "_type": {
            "_id": "TermsAndConditionsDecisionNode",
            "name": "Terms and Conditions Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "4bef992a-b9c5-4f86-a4c9-c02030680a2b": {
          "_id": "4bef992a-b9c5-4f86-a4c9-c02030680a2b",
          "_rev": "2108449174",
          "identityResource": "managed/alpha_user",
          "_type": {
            "_id": "RequiredAttributesDecisionNode",
            "name": "Required Attributes Present",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "57aa078c-d8ff-4bed-9b88-286c0d7d0c2f": {
          "_id": "57aa078c-d8ff-4bed-9b88-286c0d7d0c2f",
          "_rev": "-598757344",
          "useUniversalIdForUsername": false,
          "minimumPasswordLength": 8,
          "mixedCaseForPasswordChangeMessages": false,
          "_type": {
            "_id": "IdentityStoreDecisionNode",
            "name": "Identity Store Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "TRUE",
              "displayName": "True"
            },
            {
              "id": "FALSE",
              "displayName": "False"
            },
            {
              "id": "LOCKED",
              "displayName": "Locked"
            },
            {
              "id": "CANCELLED",
              "displayName": "Cancelled"
            },
            {
              "id": "EXPIRED",
              "displayName": "Expired"
            }
          ]
        },
        "593ce86d-5796-4f50-bba4-75e5f8219ee1": {
          "_id": "593ce86d-5796-4f50-bba4-75e5f8219ee1",
          "_rev": "273636289",
          "status": "SUCCESS",
          "_type": {
            "_id": "product-PingOneProtectResultNode",
            "name": "PingOne Protect Result",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "65368b39-2dae-43ac-999a-0b373780b4e2": {
          "_id": "65368b39-2dae-43ac-999a-0b373780b4e2",
          "_rev": "-473247627",
          "emailSuspendMessage": {
            "en": "An email has been sent to the address you entered. Click the link in that email to proceed."
          },
          "emailTemplateName": "magicLinkTemplate",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "objectLookup": true,
          "_type": {
            "_id": "EmailSuspendNode",
            "name": "Email Suspend Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "6709d20f-d15b-481a-aebb-2b1cfab90957": {
          "_id": "6709d20f-d15b-481a-aebb-2b1cfab90957",
          "_rev": "1796182398",
          "_type": {
            "_id": "AccountActiveDecisionNode",
            "name": "Account Active Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "76d720ff-73e9-482c-adf9-4724f7b71b60": {
          "_id": "76d720ff-73e9-482c-adf9-4724f7b71b60",
          "_rev": "-1910105467",
          "identityResource": "managed/alpha_user",
          "_type": {
            "_id": "CreateObjectNode",
            "name": "Create Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "CREATED",
              "displayName": "Created"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        },
        "82268cd3-3139-4136-be72-2d2c676990e3": {
          "_id": "82268cd3-3139-4136-be72-2d2c676990e3",
          "_rev": "-575711976",
          "clientType": "BROWSER",
          "script": "58c824ae-84ed-4724-82cd-db128fc3f6c",
          "usernameAttribute": "userName",
          "_type": {
            "_id": "SocialProviderHandlerNodeV2",
            "name": "Social Provider Handler Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "ACCOUNT_EXISTS",
              "displayName": "Account exists"
            },
            {
              "id": "NO_ACCOUNT",
              "displayName": "No account exists"
            },
            {
              "id": "SOCIAL_AUTH_INTERRUPTED",
              "displayName": "Social auth interrupted"
            }
          ]
        },
        "829b4f7e-1ab3-443a-9a3d-815496865502": {
          "_id": "829b4f7e-1ab3-443a-9a3d-815496865502",
          "_rev": "-1000919906",
          "nodes": [
            {
              "_id": "ba67da1e-9e74-4cb5-aac3-7269daa6fa2a",
              "nodeType": "ValidatedPasswordNode",
              "displayName": "Platform Password"
            },
            {
              "_id": "981aafd5-5ff3-4223-b91d-32f980a4a2e7",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validate Inputs"
            },
            {
              "_id": "e6d8de25-cc29-4acc-bb32-5904e90beae9",
              "nodeType": "AcceptTermsAndConditionsNode",
              "displayName": "Accept Terms and Conditions"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Create Your Profile"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "8923efcd-80a8-42ae-871a-46403a5fa194": {
          "_id": "8923efcd-80a8-42ae-871a-46403a5fa194",
          "_rev": "-1393372054",
          "identityResource": "managed/alpha_user",
          "patchAsObject": false,
          "ignoredFields": [],
          "identityAttribute": "userName",
          "_type": {
            "_id": "PatchObjectNode",
            "name": "Patch Object",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "PATCHED",
              "displayName": "Patched"
            },
            {
              "id": "FAILURE",
              "displayName": "Failed"
            }
          ]
        },
        "89ce033d-ea45-434f-bdb2-ce1f924e04da": {
          "_id": "89ce033d-ea45-434f-bdb2-ce1f924e04da",
          "_rev": "232787346",
          "_type": {
            "_id": "AcceptTermsAndConditionsNode",
            "name": "Accept Terms and Conditions",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "a2aa29d0-5466-47b6-aede-412bcc5c6dd2": {
          "_id": "a2aa29d0-5466-47b6-aede-412bcc5c6dd2",
          "_rev": "328444764",
          "nodes": [
            {
              "_id": "2a8823b7-b8bd-4205-baaf-5be12e1caeef",
              "nodeType": "AttributeCollectorNode",
              "displayName": "Attribute Collector"
            },
            {
              "_id": "69fde49b-ada7-4e9a-aad0-4d37bf2d4849",
              "nodeType": "ScriptedDecisionNode",
              "displayName": "Validating Inputs"
            }
          ],
          "pageDescription": {},
          "pageHeader": {
            "en": "Create Your Profile"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "c6b1586e-a98f-40f3-9022-171bf224c798": {
          "_id": "c6b1586e-a98f-40f3-9022-171bf224c798",
          "_rev": "479509940",
          "script": "d5242e7f-60b1-4314-93e9-89b80f7c5bf6",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id",
            "ciam_allowedMFATypes"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "cd664fcc-06ec-4b3f-aeba-d69a98e3f346": {
          "_id": "cd664fcc-06ec-4b3f-aeba-d69a98e3f346",
          "_rev": "-1622516280",
          "script": "391bc676-db7a-4a3e-ad27-c07c76c62f77",
          "outcomes": [
            "true",
            "false"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "ciam_protectAnalysisRequired"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            },
            {
              "id": "false",
              "displayName": "false"
            }
          ]
        },
        "d2a3c77b-1bff-4221-99f1-be18dcc19090": {
          "_id": "d2a3c77b-1bff-4221-99f1-be18dcc19090",
          "_rev": "889719908",
          "_type": {
            "_id": "AccountActiveDecisionNode",
            "name": "Account Active Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "d39972ca-0d61-45b1-b303-f8c20694d6cf": {
          "_id": "d39972ca-0d61-45b1-b303-f8c20694d6cf",
          "_rev": "145755739",
          "script": "3290857f-9150-4b56-afeb-8437fca17711",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "ciam_allowedMFATypes",
            "ciam_protectAnalysisRequired",
            "ciam_magicLinkEnabled"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "d4d85de2-09ec-42bd-9a27-6d119f0c8c88": {
          "_id": "d4d85de2-09ec-42bd-9a27-6d119f0c8c88",
          "_rev": "1009592032",
          "authLevelRequirement": 1,
          "_type": {
            "_id": "AuthLevelDecisionNode",
            "name": "Auth Level Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "eda29daf-f00f-4058-a69b-3b337536fb91": {
          "_id": "eda29daf-f00f-4058-a69b-3b337536fb91",
          "_rev": "-1039240369",
          "script": "81980021-14fc-4e6c-a397-80452b16963f",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "p1ProtectAction",
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "f30290ec-a1d6-4376-96ad-af0800cca7fd": {
          "_id": "f30290ec-a1d6-4376-96ad-af0800cca7fd",
          "_rev": "-218380691",
          "script": "d5242e7f-60b1-4314-93e9-89b80f7c5bf6",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id",
            "ciam_allowedMFATypes"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "f3bdeddc-f2bc-4b0e-a0ca-0166e149c3e1": {
          "_id": "f3bdeddc-f2bc-4b0e-a0ca-0166e149c3e1",
          "_rev": "1920270758",
          "tree": "MFA Authentication - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "f75ce75e-959f-4684-9cd3-5eccf9cbe75d": {
          "_id": "f75ce75e-959f-4684-9cd3-5eccf9cbe75d",
          "_rev": "-1737044719",
          "tree": "Threat Detection - Inner Journey",
          "_type": {
            "_id": "InnerTreeEvaluatorNode",
            "name": "Inner Tree Evaluator",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "de286919-6e98-4a9e-859f-6e86ed11d212": {
          "_id": "de286919-6e98-4a9e-859f-6e86ed11d212",
          "_rev": "431697517",
          "spamDetectionTolerance": 3,
          "spamDetectionEnabled": false,
          "exitMessage": {},
          "waitingMessage": {
            "en": "Loading..."
          },
          "secondsToWait": 2,
          "exitable": false,
          "_type": {
            "_id": "PollingWaitNode",
            "name": "Polling Wait Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "DONE",
              "displayName": "Done"
            }
          ]
        },
        "0cb0ca30-6b20-4e8c-a5d2-2817fca0932c": {
          "_id": "0cb0ca30-6b20-4e8c-a5d2-2817fca0932c",
          "_rev": "-925564",
          "script": "391bc676-db7a-4a3e-ad27-c07c76c62f77",
          "outcomes": [
            "true",
            "false"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "ciam_protectAnalysisRequired"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            },
            {
              "id": "false",
              "displayName": "false"
            }
          ]
        },
        "ae7268ad-116d-4a2c-9110-22a299f20837": {
          "_id": "ae7268ad-116d-4a2c-9110-22a299f20837",
          "_rev": "-440913769",
          "lockAction": "LOCK",
          "_type": {
            "_id": "AccountLockoutNode",
            "name": "Account Lockout",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "7be35b6e-4fe7-4741-8a86-e7e7f83dbc47": {
          "_id": "7be35b6e-4fe7-4741-8a86-e7e7f83dbc47",
          "_rev": "1301302463",
          "identityAttribute": "userName",
          "identifier": "userName",
          "_type": {
            "_id": "IdentifyExistingUserNode",
            "name": "Identify Existing User",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "2ee63a92-f470-4910-a25b-f164e5da7bd3": {
          "_id": "2ee63a92-f470-4910-a25b-f164e5da7bd3",
          "_rev": "1187492779",
          "script": "50c68c9c-1fda-4f66-b71e-30bc3f3b13a0",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "_id"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "c5e0b647-f936-4554-8584-fd63729d4311": {
          "_id": "c5e0b647-f936-4554-8584-fd63729d4311",
          "_rev": "-2035223851",
          "lockAction": "UNLOCK",
          "_type": {
            "_id": "AccountLockoutNode",
            "name": "Account Lockout",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "f68336f6-1317-492e-a693-d3586c7f49a2": {
          "_id": "f68336f6-1317-492e-a693-d3586c7f49a2",
          "_rev": "120633183",
          "emailTemplateName": "welcome",
          "identityAttribute": "userName",
          "emailAttribute": "mail",
          "_type": {
            "_id": "EmailTemplateNode",
            "name": "Email Template Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "EMAIL_SENT",
              "displayName": "Email Sent"
            },
            {
              "id": "EMAIL_NOT_SENT",
              "displayName": "Email Not Sent"
            }
          ]
        }
      },
      "innerNodes": {
        "f7fb5574-005e-4c5d-9678-f9724eab9e7e": {
          "_id": "f7fb5574-005e-4c5d-9678-f9724eab9e7e",
          "_rev": "1598631058",
          "usernameAttribute": "userName",
          "validateInput": false,
          "_type": {
            "_id": "ValidatedUsernameNode",
            "name": "Platform Username",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "85584d3e-23ff-4d5e-baac-28790d0576bb": {
          "_id": "85584d3e-23ff-4d5e-baac-28790d0576bb",
          "_rev": "-1858374038",
          "passwordAttribute": "password",
          "validateInput": false,
          "_type": {
            "_id": "ValidatedPasswordNode",
            "name": "Platform Password",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "9521836a-245f-4105-9e23-4a8c389f0252": {
          "_id": "9521836a-245f-4105-9e23-4a8c389f0252",
          "_rev": "-651186012",
          "script": "b8332c2e-adec-4ff3-8e5e-95cea0baa73e",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "37d99565-2bb2-4f66-a683-de4ba965a73c": {
          "_id": "37d99565-2bb2-4f66-a683-de4ba965a73c",
          "_rev": "1509260829",
          "includeLocalAuthentication": true,
          "filteredProviders": [
            "Google",
            "Facebook"
          ],
          "identityAttribute": "mail",
          "passwordAttribute": "password",
          "offerOnlyExisting": false,
          "_type": {
            "_id": "SelectIdPNode",
            "name": "Select Identity Provider",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "socialAuthentication",
              "displayName": "Social Authentication"
            },
            {
              "id": "localAuthentication",
              "displayName": "Local Authentication"
            }
          ]
        },
        "ba67da1e-9e74-4cb5-aac3-7269daa6fa2a": {
          "_id": "ba67da1e-9e74-4cb5-aac3-7269daa6fa2a",
          "_rev": "1905802174",
          "passwordAttribute": "password",
          "validateInput": false,
          "_type": {
            "_id": "ValidatedPasswordNode",
            "name": "Platform Password",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "981aafd5-5ff3-4223-b91d-32f980a4a2e7": {
          "_id": "981aafd5-5ff3-4223-b91d-32f980a4a2e7",
          "_rev": "1282174908",
          "script": "bd5c931d-3f2b-4a39-9ee8-8b5efabd4ea2",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        },
        "e6d8de25-cc29-4acc-bb32-5904e90beae9": {
          "_id": "e6d8de25-cc29-4acc-bb32-5904e90beae9",
          "_rev": "-1974788987",
          "_type": {
            "_id": "AcceptTermsAndConditionsNode",
            "name": "Accept Terms and Conditions",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "2a8823b7-b8bd-4205-baaf-5be12e1caeef": {
          "_id": "2a8823b7-b8bd-4205-baaf-5be12e1caeef",
          "_rev": "-467309056",
          "attributesToCollect": [
            "userName",
            "givenName",
            "sn"
          ],
          "identityAttribute": "userName",
          "validateInputs": true,
          "required": true,
          "_type": {
            "_id": "AttributeCollectorNode",
            "name": "Attribute Collector",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "69fde49b-ada7-4e9a-aad0-4d37bf2d4849": {
          "_id": "69fde49b-ada7-4e9a-aad0-4d37bf2d4849",
          "_rev": "1444544702",
          "script": "678ed3e6-ea15-4016-9a67-fe2d3e76dae1",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "errorMessage",
            "errorDetails"
          ],
          "inputs": [
            "null"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        }
      },
      "scripts": {
        "47616408-11a3-485c-8d34-b7eac1383a58": {
          "_id": "47616408-11a3-485c-8d34-b7eac1383a58",
          "name": "Threat Detection - Set Protect Action Init",
          "description": "Script to set Protect action as Eval, will be used in Threat Detection Journey to initialize Protect SDK",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"p1ProtectAction\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    // Action to be taken in threat detection child journey\\n    nodeState.putShared(\\\"p1ProtectAction\\\", \\\"init\\\");\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "3453f878-5d62-41d1-b816-cfc272217853": {
          "_id": "3453f878-5d62-41d1-b816-cfc272217853",
          "name": "Threat Detection - Set Flow Type As Authentication",
          "description": "Script to set flowType as Authentication",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"ciam_protectAnalysisRequired\\\", esv.p1.protect.analysis.required\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\", \\\"false\\\"\\n*/\\n\\ntry {\\n    // Setting the flowType as Authentication, this will be used to differentiate paths in Threat Detection Journey\\n    nodeState.putShared(\\\"flowType\\\", \\\"Authentication\\\");\\n    // Go to true\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "d5242e7f-60b1-4314-93e9-89b80f7c5bf6": {
          "_id": "d5242e7f-60b1-4314-93e9-89b80f7c5bf6",
          "name": "Threat Detection - Set email verification status",
          "description": "Script to set email verification status in user's profile",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"_id\\\", \\\"ciam_allowedMFATypes\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\n// Caution: This script might auto-enroll the \\\"EMAIL\\\" as a MFA method in user's profile\\n\\n\\ntry {\\n    // Get the userId\\n    var userId = nodeState.get(\\\"_id\\\");\\n    \\n    // Update the email verification status attribute of user to \\\"true\\\"\\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_emailVerified\\\", \\\"value\\\":\\\"true\\\"}]);\\n\\n    // Enroll email as an MFA authentication method\\n    var allowedMFAMethods = nodeState.get(\\\"ciam_allowedMFATypes\\\");\\n    var mfaDevicesObj = openidm.read(\\\"managed/alpha_user/\\\" + userId, null, [\\\"custom_mfaDevices\\\"]);\\n    var mfaDevices = (mfaDevicesObj && mfaDevicesObj.custom_mfaDevices) ? mfaDevicesObj.custom_mfaDevices : [];\\n\\n    // By default returned mfaDevices is of Object type so values are parsed in a new array\\n    var usableMFADevices = [];\\n   \\n    mfaDevices.forEach(device => {\\n        usableMFADevices.push(device);\\n    });\\n\\n    var emailMFAAllowed = false;\\n    allowedMFAMethods.forEach(device => {\\n        if(device === \\\"EMAIL\\\") emailMFAAllowed = true;\\n    });\\n    \\n    // Add email to the MFA Devices list, if not already present \\n    if(emailMFAAllowed && !usableMFADevices.includes(\\\"EMAIL\\\")) usableMFADevices.push(\\\"EMAIL\\\");\\n    \\n    // Update the custom_mfaDevices Object\\n    openidm.patch(\\\"managed/alpha_user/\\\" + userId, null, [{\\\"operation\\\":\\\"replace\\\", \\\"field\\\":\\\"/custom_mfaDevices\\\", \\\"value\\\":usableMFADevices}]);\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "391bc676-db7a-4a3e-ad27-c07c76c62f77": {
          "_id": "391bc676-db7a-4a3e-ad27-c07c76c62f77",
          "name": "Threat Detection - Protect Analysis Required",
          "description": "Script to check if P1 Protect analysis is required or not",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"ciam_protectAnalysisRequired\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\", \\\"false\\\"\\n*/\\n\\n// Prerequisites: Set the environment variable: p1-protect-analysis-required\\n\\ntry {\\n    // Get Protect analysis required or not from the Environment variable\\n    var protectAnalysisRequired = (systemEnv.getProperty(\\\"esv.p1.protect.analysis.required\\\") && systemEnv.getProperty(\\\"esv.p1.protect.analysis.required\\\").length) ? systemEnv.getProperty(\\\"esv.p1.protect.analysis.required\\\") : nodeState.get(\\\"ciam_protectAnalysisRequired\\\");\\n    \\n    if(protectAnalysisRequired === \\\"true\\\" || protectAnalysisRequired === true) outcome = \\\"true\\\";\\n    else outcome = \\\"false\\\";\\n    // Go to outcome\\n    action.goTo(outcome);\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "3290857f-9150-4b56-afeb-8437fca17711": {
          "_id": "3290857f-9150-4b56-afeb-8437fca17711",
          "name": "Threat Detection - Initialize Variables",
          "description": "Script to Initialize variables that will be used further in the Journey",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/* Prerequisites for this Journey Pack\\n       -Create following custom attributes before proceeding:\\n           1. custom_emailVerified - string (To keep track that user has verified their emailAddress)\\n           2. custom_protectActivityCity - string (User's P1 Protect Activity City, used in notification template)\\n           3. custom_protectActivityState - string (User's P1 Protect Activity City, used in notification template)\\n           4. custom_protectDeviceOS - string (User's P1 Protect Activity City, used in notification template)\\n           5. custom_mfaDevices - array of string (To set, fetch and display user's registered MFA devices)\\n           6. custom_latestMFADevice - string (Recent MFA device registered by user, used in notification template)\\n       -Configuration Check\\n           1. Set the environment variable p1-protect-analysis-required. If it is not set, the value specified in the code below for \\\"protectAnalysisRequired\\\" var will be used.\\n           2. Threat Detection Inner Journey (If Protect Analysis Is Required):\\n               a. Update the PingOne Worker Service ID (P1 Worker App), Risk Policy ID* in following nodes: (*Optional, if not provided default will be considered)\\n                   -- P1 Protect Initialize (1 instance)\\n                   -- P1 Protect Evaluation (2 instances)\\n           3. MFA Registration Inner Journey (If \\\"SMS\\\", or \\\"VOICE\\\" are opted in below \\\"allowedMFATyps\\\" array):\\n               a. Update the required fields in:\\n                   -- OTP SMS Sender Node\\n                   -- Twilio Verify Lookup\\n                   -- Twilio Verify Sender\\n           4. MFA Authenticaion Inner Journey (If \\\"EMAIL\\\", \\\"SMS\\\", or \\\"VOICE\\\" are opted in below \\\"allowedMFATyps\\\" array):\\n               a. Update the required fields in:\\n                   -- OTP Email Sender Node\\n                   -- OTP SMS Sender Node\\n                   -- Twilio Verify Lookup\\n                   -- Twilio Verify Sender\\n*/\\n\\n\\n// Allowed MFA device types by the Admin\\nvar allowedMFATypes = [\\\"FIDO2\\\", \\\"OATH\\\", \\\"PUSH\\\", \\\"EMAIL\\\", \\\"SMS\\\", \\\"VOICE\\\"];\\nnodeState.putShared(\\\"ciam_allowedMFATypes\\\", allowedMFATypes);\\n\\n// Check if Admin wants to enable/disable protectAnalysis\\nvar protectAnalysisRequired = true;\\nnodeState.putShared(\\\"ciam_protectAnalysisRequired\\\", protectAnalysisRequired);\\n\\n// Check if Admin wants to allow OOB Magic Link as an MFA authentication method\\nvar magicLinkEnabled = true;\\nnodeState.putShared(\\\"ciam_magicLinkEnabled\\\", magicLinkEnabled);\\n\\noutcome = \\\"true\\\";\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "81980021-14fc-4e6c-a397-80452b16963f": {
          "_id": "81980021-14fc-4e6c-a397-80452b16963f",
          "name": "Threat Detection - Set Protect Action As Eval",
          "description": "Script to set Protect action as Eval, will be used in Threat Detection Journey to evaluate Risk",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"p1ProtectAction\\\", \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {  \\n    // Action to be taken in threat detection child journey\\n    nodeState.putShared(\\\"p1ProtectAction\\\", \\\"eval\\\");\\n    // Go to true\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "50c68c9c-1fda-4f66-b71e-30bc3f3b13a0": {
          "_id": "50c68c9c-1fda-4f66-b71e-30bc3f3b13a0",
          "name": "Threat Detection - Delete User Entry Script",
          "description": "Script to delete a user's entry from directory service if they fail during registration process",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: \\\"_id\\\"\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    var userId = nodeState.get(\\\"_id\\\");\\n    // Delete the user entry from the data store\\n    openidm.delete('managed/alpha_user/'+ userId, null);\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error\\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "b8332c2e-adec-4ff3-8e5e-95cea0baa73e": {
          "_id": "b8332c2e-adec-4ff3-8e5e-95cea0baa73e",
          "name": "Threat Detection - Validating Inputs - Authentication",
          "description": "Script to validate inputs, sets constraints, and enables/disables the submit button based on validity",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    // Disable next button, if input is empty\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                function go(obs) { \\\\n\\\\\\n                    const username = document.querySelectorAll('input[data-vv-as=\\\\\\\"User Name\\\\\\\"]')[0]; \\\\n\\\\\\n                    const password = document.querySelectorAll('input[data-vv-as=\\\\\\\"Password\\\\\\\"]')[0]; \\\\n\\\\\\n                    if (username && password && submitBtn) { \\\\n\\\\\\n                        const enableSubmitBtn = () => { \\\\n\\\\\\n                              // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = username.value.length > 0 && password.value.length > 0; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    // Otherwise, disable the button \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                        }; \\\\n\\\\\\n                        // Revalidate before form submission \\\\n\\\\\\n                        submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                            const isValidInput = username.value.length > 0 && password.value.length > 0; \\\\n\\\\\\n                            if (!isValidInput) { \\\\n\\\\\\n                                event.preventDefault(); \\\\n\\\\\\n                                submitBtn.disabled = true; \\\\n\\\\\\n                            } \\\\n\\\\\\n                        }); \\\\n\\\\\\n                        username.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                        password.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                        if (obs) obs.disconnect(); \\\\n\\\\\\n                        return; \\\\n\\\\\\n                   } \\\\n\\\\\\n                  } \\\\n\\\\\\n                  if (document.querySelectorAll('input[data-vv-as=\\\\\\\"User Name\\\\\\\"]')[0] && document.querySelectorAll('input[data-vv-as=\\\\\\\"Password\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                  else { \\\\n\\\\\\n                    const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                    observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                  } \\\\n\\\\\\n        \\\");\\n    }\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error \\n    action.goTo(\\\"Error\\\");\\n}\\n\\n\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "bd5c931d-3f2b-4a39-9ee8-8b5efabd4ea2": {
          "_id": "bd5c931d-3f2b-4a39-9ee8-8b5efabd4ea2",
          "name": "Threat Detection - Validate Password",
          "description": "Script to validate password, sets constraints",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    // Disable next button, if input is empty\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    if(submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function go(obs) { \\\\n\\\\\\n                        const password = document.querySelectorAll('input[data-vv-as=\\\\\\\"Password\\\\\\\"]')[0]; \\\\n\\\\\\n                        if (password && submitBtn) { \\\\n\\\\\\n                            const enableSubmitBtn = () => { \\\\n\\\\\\n                                // Check input validity before enabling submit button \\\\n\\\\\\n                                const isValidInput = password.value.length > 0; \\\\n\\\\\\n                                if (isValidInput) { \\\\n\\\\\\n                                    submitBtn.disabled = false; \\\\n\\\\\\n                                } else { \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }; \\\\n\\\\\\n                            // Revalidate before form submission \\\\n\\\\\\n                            submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                                const isValidInput = password.value.length > 0; \\\\n\\\\\\n                                if (!isValidInput) { \\\\n\\\\\\n                                    event.preventDefault(); \\\\n\\\\\\n                                    submitBtn.disabled = true; \\\\n\\\\\\n                                } \\\\n\\\\\\n                            }); \\\\n\\\\\\n                            password.addEventListener('input', enableSubmitBtn); \\\\n\\\\\\n                            if (obs) obs.disconnect(); \\\\n\\\\\\n                            return; \\\\n\\\\\\n                       } \\\\n\\\\\\n                      } \\\\n\\\\\\n                      if (document.querySelectorAll('input[data-vv-as=\\\\\\\"Password\\\\\\\"]')[0]) go(); \\\\n\\\\\\n                      else { \\\\n\\\\\\n                        const observer = new MutationObserver((mutations, obs) => { go(obs); }); \\\\n\\\\\\n                        observer.observe(document, { childList: true, subtree: true }); \\\\n\\\\\\n                      } \\\\n\\\\\\n        \\\");\\n    }\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        },
        "678ed3e6-ea15-4016-9a67-fe2d3e76dae1": {
          "_id": "678ed3e6-ea15-4016-9a67-fe2d3e76dae1",
          "name": "Threat Detection - Validate name and email address",
          "description": "Script to validate name and email address, sets constraints",
          "script": "\"/*\\n  - Data made available by nodes that have already executed are available in the sharedState variable.\\n  - The script should set outcome to either \\\"true\\\" or \\\"false\\\".\\n */\\n\\n/*\\n    - Script Inputs: null\\n    - Script Outputs: \\\"errorMessage\\\", \\\"errorDetails\\\"\\n    - Outcomes: \\\"true\\\"\\n*/\\n\\ntry {\\n    // Validate Inputs\\n    function validateInput() {\\n        return String(\\\" \\\\n\\\\\\n                    const firstName = document.querySelectorAll('input[data-vv-as=\\\\\\\"First Name\\\\\\\"]')[0]; \\\\n\\\\\\n                    const lastName = document.querySelectorAll('input[data-vv-as=\\\\\\\"Last Name\\\\\\\"]')[0]; \\\\n\\\\\\n                    const emailAddress = document.querySelectorAll('input[data-vv-as=\\\\\\\"Email Address\\\\\\\"]')[0]; \\\\n\\\\\\n                    const submitBtn = document.querySelectorAll('button[type=\\\\\\\"submit\\\\\\\"]')[0]; \\\\n\\\\\\n                    \\\\n\\\\\\n                    if (firstName) firstName.setAttribute('maxlength', '255'); \\\\n\\\\\\n                    if (lastName) lastName.setAttribute('maxlength', '255'); \\\\n\\\\\\n                    if (emailAddress) emailAddress.setAttribute('maxlength', '255'); \\\\n\\\\\\n                    \\\\n\\\\\\n                    if (submitBtn) submitBtn.disabled = true; \\\\n\\\\\\n                    function validateFields() { \\\\n\\\\\\n                        const isValid = firstName.value.length > 0 && lastName.value.length > 0 && emailAddress.value.length > 0; \\\\n\\\\\\n                        submitBtn.disabled = !isValid; \\\\n\\\\\\n                    } \\\\n\\\\\\n                    \\\\n\\\\\\n                    submitBtn.addEventListener('click', (event) => { \\\\n\\\\\\n                        // Ensure the fields are not exceeding max length even if modified in browser \\\\n\\\\\\n                        if (firstName.value.length > 255 || lastName.value.length > 255 || emailAddress.value.length > 255) { \\\\n\\\\\\n                            event.preventDefault(); \\\\n\\\\\\n                            submitBtn.disabled = true; \\\\n\\\\\\n                        } \\\\n\\\\\\n                        const isValid = firstName.value.length > 0 && lastName.value.length > 0 && emailAddress.value.length > 0; \\\\n\\\\\\n                        if (!isValid) { \\\\n\\\\\\n                            event.preventDefault(); \\\\n\\\\\\n                            submitBtn.disabled = true; \\\\n\\\\\\n                        } \\\\n\\\\\\n                    }); \\\\n\\\\\\n                    \\\\n\\\\\\n                    firstName.addEventListener('input', validateFields); \\\\n\\\\\\n                    lastName.addEventListener('input', validateFields); \\\\n\\\\\\n                    emailAddress.addEventListener('input', validateFields); \\\\n\\\\\\n        \\\");\\n    }\\n    \\n    if (callbacks.isEmpty()) {                \\n        // Request callbacks\\n        callbacksBuilder.scriptTextOutputCallback(validateInput());\\n    }\\n    // Go to true path\\n    action.goTo(\\\"true\\\");\\n} catch (e) {\\n    // User-friendly error message\\n    nodeState.putShared(\\\"errorMessage\\\", \\\"An error has occurred. Contact support.\\\");\\n    // Detailed error information for debugging\\n    nodeState.putShared(\\\"errorDetails\\\", e.toString());\\n    // Go to Error  \\n    action.goTo(\\\"Error\\\");\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "2.0"
        }
      },
      "emailTemplates": {
        "magicLinkTemplate": {
          "_id": "emailTemplate/magicLinkTemplate",
          "advancedEditor": true,
          "defaultLocale": "en",
          "description": "To authenticate with email address ",
          "displayName": "Magic Link Template",
          "enabled": true,
          "from": "",
          "html": {
            "en": "",
            "fr": ""
          },
          "message": {
            "en": "<div style=\"display:block;text-align:center;font-family:sans-serif;border:1px solid #c5c5c5;width:400px;padding:30px 20px\">\n  <img src=\"https://assets.pingone.com/ux/ui-library/5.0.2/images/logo-pingidentity.png\" alt=\"Company Logo\" style=\"height:65px;margin-bottom:10px\" />\n  <h1>Sign On Request</h1>\n  <div style=\"margin-top:20px;margin-bottom:25px\">\n    <p>Please click the link below to authenticate. </p>\n    <a href=\"{{object.resumeURI}}\" style=\"font-size:14pt\">Complete Sign On</a>\n  </div>\n</div>",
            "fr": "<html>\n  <head></head>\n  <body style=\"background-color: #324054; color: #5e6d82; padding: 60px; text-align: center;\">\n    <h3>Ceci est votre mail d'inscription.</h3>\n    <p>\n      <a href=\"{{object.resumeURI}}\" style=\"text-decoration: none; color: #109cf1;\">Lien de vérification email</a>\n    </p>\n  </body>\n</html>"
          },
          "mimeType": "text/html",
          "styles": "body{background-color:#324054;color:#5e6d82;padding:60px;text-align:center}a{text-decoration:none;color:#109cf1}.content{background-color:#fff;border-radius:4px;margin:0 auto;padding:48px;width:235px}",
          "subject": {
            "en": "Sign On Request",
            "fr": "Créer un nouveau compte"
          },
          "templateId": "magicLinkTemplate"
        }
      },
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    }
  }
}
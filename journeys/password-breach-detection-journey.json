{
  "meta": {
    "origin": "https://openam-chico-dev.forgeblocks.com/platform/?realm=alpha#/journeys",
    "exportedBy": "library@pingidentity.com",
    "exportDate": "2024-02-12T16:30:09.315Z",
    "exportTool": "platform-admin ui tree export",
    "exportToolVersion": "1.0",
    "treesSelectedForExport": [
      "iPasswordBreachDetection"
    ],
    "innerTreesIncluded": []
  },
  "trees": {
    "iPasswordBreachDetection": {
      "tree": {
        "_id": "iPasswordBreachDetection",
        "_rev": "-405739701",
        "identityResource": "managed/alpha_user",
        "uiConfig": {
          "categories": "[\"Adaptive\"]"
        },
        "entryNodeId": "7be17081-0dd7-4f70-93b9-32f12710f53b",
        "innerTreeOnly": false,
        "nodes": {
          "2c18a416-465d-4a4b-a6b5-19bdf84cc900": {
            "connections": {
              "false": "e301438c-0bd0-429c-ab0c-66126501069a",
              "true": "7be17081-0dd7-4f70-93b9-32f12710f53b"
            },
            "displayName": "Breached!",
            "nodeType": "PageNode",
            "x": 424,
            "y": 345.015625
          },
          "7be17081-0dd7-4f70-93b9-32f12710f53b": {
            "connections": {
              "breached": "2c18a416-465d-4a4b-a6b5-19bdf84cc900",
              "clear": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0",
              "failed": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Analyze Password",
            "nodeType": "ScriptedDecisionNode",
            "x": 195,
            "y": 219.015625
          },
          "b9c86469-b19c-4e27-8cac-95fd1beebcd8": {
            "connections": {
              "true": "70e691a5-1e33-4ac3-a356-e7b6d60d92e0"
            },
            "displayName": "Debug",
            "nodeType": "ScriptedDecisionNode",
            "x": 325,
            "y": 74.015625
          }
        },
        "description": "Use Have I Been Pwned Password to check if password has been breached.",
        "staticNodes": {
          "70e691a5-1e33-4ac3-a356-e7b6d60d92e0": {
            "x": 474,
            "y": 210
          },
          "e301438c-0bd0-429c-ab0c-66126501069a": {
            "x": 663,
            "y": 502
          },
          "startNode": {
            "x": 50,
            "y": 250
          }
        },
        "enabled": true
      },
      "nodes": {
        "2c18a416-465d-4a4b-a6b5-19bdf84cc900": {
          "_id": "2c18a416-465d-4a4b-a6b5-19bdf84cc900",
          "_rev": "1807594571",
          "nodes": [
            {
              "_id": "848fcb6e-0c5a-431b-b594-ad00a8439a92",
              "nodeType": "ValidatedPasswordNode",
              "displayName": "Password"
            },
            {
              "_id": "98f8ea1a-38e7-49f7-aabc-899b19f1d628",
              "nodeType": "MessageNode",
              "displayName": "User Choice"
            }
          ],
          "pageDescription": {
            "en": "The password you entered was exposed in past breaches and should not be used!"
          },
          "pageHeader": {
            "en": "Breached!"
          },
          "_type": {
            "_id": "PageNode",
            "name": "Page Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        },
        "7be17081-0dd7-4f70-93b9-32f12710f53b": {
          "_id": "7be17081-0dd7-4f70-93b9-32f12710f53b",
          "_rev": "-22160818",
          "script": "790045fa-a325-4e3e-96f8-d4a91b32e9de",
          "outcomes": [
            "clear",
            "breached",
            "failed"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*",
            "password"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "clear",
              "displayName": "clear"
            },
            {
              "id": "breached",
              "displayName": "breached"
            },
            {
              "id": "failed",
              "displayName": "failed"
            }
          ]
        },
        "b9c86469-b19c-4e27-8cac-95fd1beebcd8": {
          "_id": "b9c86469-b19c-4e27-8cac-95fd1beebcd8",
          "_rev": "-1802137715",
          "script": "3cb43516-ae69-433a-8787-501d45db14e9",
          "outcomes": [
            "true"
          ],
          "outputs": [
            "*"
          ],
          "inputs": [
            "*"
          ],
          "_type": {
            "_id": "ScriptedDecisionNode",
            "name": "Scripted Decision",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "true"
            }
          ]
        }
      },
      "innerNodes": {
        "848fcb6e-0c5a-431b-b594-ad00a8439a92": {
          "_id": "848fcb6e-0c5a-431b-b594-ad00a8439a92",
          "_rev": "978394777",
          "passwordAttribute": "password",
          "validateInput": true,
          "_type": {
            "_id": "ValidatedPasswordNode",
            "name": "Platform Password",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "outcome",
              "displayName": "Outcome"
            }
          ]
        },
        "98f8ea1a-38e7-49f7-aabc-899b19f1d628": {
          "_id": "98f8ea1a-38e7-49f7-aabc-899b19f1d628",
          "_rev": "-303922873",
          "messageYes": {
            "en": "Validate new password"
          },
          "message": {
            "en": "Would you like to enter a new password?"
          },
          "messageNo": {
            "en": "Abort"
          },
          "_type": {
            "_id": "MessageNode",
            "name": "Message Node",
            "collection": true
          },
          "_outcomes": [
            {
              "id": "true",
              "displayName": "True"
            },
            {
              "id": "false",
              "displayName": "False"
            }
          ]
        }
      },
      "scripts": {
        "790045fa-a325-4e3e-96f8-d4a91b32e9de": {
          "_id": "790045fa-a325-4e3e-96f8-d4a91b32e9de",
          "name": "HIBP Password Breach Analysis",
          "description": "Use Have I Been Pwned Password to check if password has been breached.",
          "script": "\"/* HIBP Password Breach Analysis\\n *\\n * Authors: jon.knight@forgerock.com, volker.scheuber@forgerock.com\\n * \\n * Use Have I Been Pwned Password to check if password has been breached.\\n * Calls HIBP API to retrieve the count of matching passwords in breached \\n * password database\\n * \\n * This script needs to be parametrized. It will not work properly as is. \\n * It requires the Password or Platform Password collector nodes before\\n * it can operate.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - clear\\n *   The number of breaches for password was either zero or less than the \\n *   value of THRESHOLD\\n * - breached \\n *   The number of incidents of the password in the breached password \\n *   database exceeds THRESHOLD\\n * - failed\\n *   The API call was rejected.\\n */\\n(function () {\\n    var USER_AGENT=\\\"ForgeRock\\\";\\n    var HIBP_API_KEY=systemEnv.getProperty(\\\"esv.hibp.api.key\\\");\\n    var THRESHOLD=0;\\n\\n    function toHexString(byteArray) {\\n        var s = '';\\n        byteArray.forEach(function(byte) {\\n            s += ('0' + (byte & 0xFF).toString(16)).slice(-2);\\n        });\\n        return s;\\n    }\\n\\n    outcome = \\\"failed\\\";\\n\\n    var md = java.security.MessageDigest.getInstance('SHA-1');\\n  \\tvar password = nodeState.get(\\\"password\\\").asString();\\n//  \\tvar password = new java.lang.String(\\\"\\\");\\n//  \\tif (nodeState.get(\\\"password\\\")) {\\n//      password = nodeState.get(\\\"password\\\").asString();\\n//    }\\n    var byteArray = password.getBytes(\\\"UTF-8\\\");\\n    md.update(byteArray);\\n    var digest = md.digest();\\n    var hex = String(toHexString(digest)).toUpperCase();\\n\\n    var request = new org.forgerock.http.protocol.Request();\\n    request.setMethod('GET');\\n    request.setUri('https://api.pwnedpasswords.com/range/' + hex.substring(0,5));\\n    request.getHeaders().add(\\\"Accept\\\",\\\"*/*\\\");\\n    request.getHeaders().add(\\\"Content-Type\\\",\\\"application/json\\\");\\n    request.getHeaders().add(\\\"User-Agent\\\", USER_AGENT);\\n    request.getHeaders().add(\\\"hibp-api-key\\\", HIBP_API_KEY);\\n\\n    var response = httpClient.send(request).get();\\n\\n    if (response.getStatus().getCode() === 200) {\\n        var max = 0;\\n        outcome = \\\"clear\\\";\\n        var result = response.getEntity().getString();\\n        var lines = result.split('\\\\n');\\n        for (i=0; i<lines.length; i++) {\\n            var prefix = lines[i].split(':')[0];\\n            if (String(hex.substring(0,5) + prefix) == hex) {\\n                var count = lines[i].split(':')[1];\\n                if (count > max) max = count;\\n            }\\n        }\\n        if (max > THRESHOLD) outcome = \\\"breached\\\";\\n        sharedState.put(\\\"hibp_password_count\\\", max);\\n    }\\n}());\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "1.0"
        },
        "3cb43516-ae69-433a-8787-501d45db14e9": {
          "_id": "3cb43516-ae69-433a-8787-501d45db14e9",
          "name": "debug--(2)",
          "description": "Display sharedState, transientState, and headers.",
          "script": "\"/* debug\\n *\\n * Author: volker.scheuber@forgerock.com\\n * \\n * Display sharedState, transientState, and headers.\\n * \\n * This script does not need to be parametrized. It will work properly as is.\\n * \\n * The Scripted Decision Node needs the following outcomes defined:\\n * - true\\n */\\nvar anchor = \\\"anchor-\\\".concat(generateNumericToken('xxx'));\\nvar halign = \\\"left\\\";\\nvar message = \\\"<p><b>Shared State</b>:<br/>\\\".concat(\\n  \\tsharedState.toString()).concat(\\\"</p>\\\").concat(\\n    \\\"<p><b>Transient State</b>:<br/>\\\").concat(\\n  \\ttransientState.toString()).concat(\\\"</p>\\\").concat(\\n    \\\"<p><b>Request Headers</b>:<br/>\\\").concat(\\n  \\trequestHeaders.toString()).concat(\\\"</p>\\\")\\nvar script = \\\"Array.prototype.slice.call(\\\\n\\\".concat(\\n  \\\"document.getElementsByClassName('callback-component')).forEach(\\\\n\\\").concat(\\n  \\\"function (e) {\\\\n\\\").concat(\\n  \\\"  var message = e.firstElementChild;\\\\n\\\").concat(\\n  \\\"  if (message.firstChild && message.firstChild.nodeName == '#text' && message.firstChild.nodeValue.trim() == '\\\").concat(anchor).concat(\\\"') {\\\\n\\\").concat(\\n  \\\"    message.className = \\\\\\\"text-left\\\\\\\";\\\\n\\\").concat(\\n  \\\"    message.align = \\\\\\\"\\\").concat(halign).concat(\\\"\\\\\\\";\\\\n\\\").concat(\\n  \\\"    message.innerHTML = '\\\").concat(message).concat(\\\"';\\\\n\\\").concat(\\n  \\\"  }\\\\n\\\").concat(\\n  \\\"})\\\")\\nvar fr = JavaImporter(\\n    org.forgerock.openam.auth.node.api.Action,\\n    javax.security.auth.callback.TextOutputCallback,\\n    com.sun.identity.authentication.callbacks.ScriptTextOutputCallback\\n)\\nif (message.length && callbacks.isEmpty()) {\\n    action = fr.Action.send(\\n        new fr.TextOutputCallback(\\n            fr.TextOutputCallback.INFORMATION,\\n            anchor\\n        ),\\n        new fr.ScriptTextOutputCallback(script)\\n    ).build()\\n}\\nelse {\\n  action = fr.Action.goTo(\\\"true\\\").build();\\n}\\n\\n /*\\n  * Generate a token in the desired format. All 'x' characters will be replaced with a random number 0-9.\\n  * \\n  * Example:\\n  * 'xxxxx' produces '28535'\\n  * 'xxx-xxx' produces '432-521'\\n  */\\nfunction generateNumericToken(format) {\\n    return format.replace(/[x]/g, function(c) {\\n        var r = Math.random()*10|0;\\n        var v = r;\\n        return v.toString(10);\\n    });\\n}\"",
          "default": false,
          "language": "JAVASCRIPT",
          "context": "AUTHENTICATION_TREE_DECISION_NODE",
          "createdBy": "null",
          "creationDate": 0,
          "lastModifiedBy": "null",
          "lastModifiedDate": 0,
          "evaluatorVersion": "1.0"
        }
      },
      "emailTemplates": {},
      "socialIdentityProviders": {},
      "themes": [],
      "saml2Entities": {},
      "circlesOfTrust": {}
    }
  }
}
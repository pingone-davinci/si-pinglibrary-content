class DaVinciFormUtils{static addRequiredFieldIndicators(formId=null){let requiredFields;if(formId){const form=document.getElementById(formId);if(form){requiredFields=form.querySelectorAll("input[required], textarea[required], select[required]")}else{console.warn(`Form with ID '${formId}' not found.`);return}}else{requiredFields=document.querySelectorAll("input[required], textarea[required], select[required]")}console.log(requiredFields);requiredFields.forEach(field=>{const label=field.labels?field.labels[0]:null;console.log(field.labels);if(label&&!label.querySelector(".text-danger")){const asterisk=document.createElement("span");asterisk.textContent=" *";asterisk.classList.add("text-danger");label.appendChild(asterisk)}})}static makePasswordToggle(id){const container=document.getElementById(id);if(!container){console.warn(`Container with ID '${id}' not found.`);return}const passwordInput=container.querySelector("input[type='password']");if(!passwordInput){console.warn(`Password input field not found within container with ID '${id}'.`);return}const toggler=document.createElement("button");toggler.setAttribute("type","button");toggler.setAttribute("aria-label","Show/Hide Password");toggler.className="btn mdi mdi-eye-off-outline position-absolute end-0 top-50 translate-middle-y";container.appendChild(toggler);const showHidePassword=()=>{const isPassword=passwordInput.type==="password";passwordInput.type=isPassword?"text":"password";toggler.classList.toggle("mdi-eye-outline",isPassword);toggler.classList.toggle("mdi-eye-off-outline",!isPassword);passwordInput.focus()};toggler.addEventListener("click",showHidePassword)}static setFieldFocus(id){if(typeof id!=="string"||id.trim()===""){console.warn("Invalid ID provided. ID must be a non-empty string.");return}const element=document.getElementById(id);if(element){if(typeof element.focus==="function"){element.focus()}else{console.warn(`Element with ID ${id} is not focusable.`)}}else{console.warn(`Element with ID ${id} not found.`)}}static createChangeObserver(id,handler,options={childList:true,characterData:true,subtree:true}){const targetNode=document.getElementById(id);if(!targetNode){console.warn(`Element with ID '${id}' not found.`);return()=>{}}const callback=mutationsList=>{for(const mutation of mutationsList){if(mutation.type==="characterData"||mutation.type==="childList"&&mutation.addedNodes.length>0){handler(mutation)}}};const observer=new MutationObserver(callback);observer.observe(targetNode,options);return()=>observer.disconnect()}static activatePasswordValidation({passwordContainerId,verifyPasswordContainerId,policy={},title="Password Requirements",defaultStyles=true,enablePasswordToggle=true,onPasswordValid,onPasswordsMatch,onValidationSuccess}){if(typeof passwordContainerId!=="string"||typeof verifyPasswordContainerId!=="string"){console.error("Invalid container IDs provided.");return}if(typeof policy==="string"){try{policy=JSON.parse(policy)}catch(error){console.error("Failed to parse policy string as JSON:",error);return}}if(typeof policy!=="object"||policy===null){console.error("Invalid policy object provided.");return}const passwordContainer=document.getElementById(passwordContainerId);const verifyPasswordContainer=document.getElementById(verifyPasswordContainerId);if(!passwordContainer){console.error(`Container with ID "${passwordContainerId}" not found.`);return}if(!verifyPasswordContainer){console.error(`Container with ID "${verifyPasswordContainerId}" not found.`);return}if(enablePasswordToggle){DaVinciFormUtils.makePasswordToggle(passwordContainerId);DaVinciFormUtils.makePasswordToggle(verifyPasswordContainerId)}function injectDefaultStyles(){if(!document.getElementById("default-password-styles")){const styleElement=document.createElement("style");styleElement.id="default-password-styles";styleElement.innerHTML=`
        .password-popup {
          position: absolute;
          top: -50px;
          right: -300px;
          width: 290px;
          opacity: 0;
          transform: translateY(-10px);
          z-index: 1000;
          background-color: #fff !important;
          border: 1px solid #ccc !important;
          box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
          padding: 5px !important;
          border-radius: 4px;
          font-size: 0.875rem;
          transition: opacity 0.3s ease, transform 0.3s ease;
        }
        .password-popup.visible {
          opacity: 1;
          transform: translateY(0);
        }
        .password-popup ul {
          padding-left: 20px !important;
          list-style-type: none !important;
        }
        .password-popup li {
          list-style: none !important;
          margin-bottom: 8px !important;
        }
      `;document.head.appendChild(styleElement)}}function handlePasswordInput(event,policy,callback){const password=event.target.value;validatePassword(password,policy,callback);if(password){showPasswordPopup()}else{hidePasswordPopup()}}function handlePasswordFocus(event){const password=event.target.value;if(password){showPasswordPopup()}}function handleVerifyPasswordInput(event,callback){const verifyPassword=event.target.value;const password=event.target.closest("form").querySelector('input[type="password"]').value;checkPasswordsMatch(password,verifyPassword,callback)}function validatePassword(password,policy,callback){const minLength=policy.length?.min;const maxLength=policy.length?.max;const minCharacters=policy.minCharacters||{};let validationResults=[];let isValid=true;if(minLength!==undefined&&maxLength!==undefined){if(password.length<minLength||password.length>maxLength){validationResults.push({msg:`Between ${minLength} and ${maxLength} characters`,valid:false});isValid=false}else{validationResults.push({msg:`Between ${minLength} and ${maxLength} characters`,valid:true})}}const characterSets={};for(const chars of Object.keys(minCharacters)){characterSets[chars]=0}for(const char of password){for(const chars of Object.keys(characterSets)){if(chars.includes(char)){characterSets[chars]++}}}for(const[chars,count]of Object.entries(minCharacters)){const placeholder=getPlaceholderText(chars,count);if(characterSets[chars]<count){validationResults.push({msg:`${placeholder}`,valid:false});isValid=false}else{validationResults.push({msg:`${placeholder}`,valid:true})}}updatePasswordPopup(validationResults,title);if(typeof callback==="function"){callback(isValid)}}function getPlaceholderText(chars,count){const pluralize=(word,count)=>count===1?word:`${word}s`;if(chars==="0123456789")return`${count} ${pluralize("number",count)}`;if(chars==="ABCDEFGHIJKLMNOPQRSTUVWXYZ")return`${count} ${pluralize("uppercase character",count)}`;if(chars==="abcdefghijklmnopqrstuvwxyz")return`${count} ${pluralize("lowercase character",count)}`;if(chars==="~!@#$%^&*()-_=+[]{}|;:,.<>/?")return`${count} ${pluralize("special character",count)}`;return`${count} ${pluralize("character from the set",count)}: "${chars}"`}function checkPasswordsMatch(password,verifyPassword,callback){const doMatch=password===verifyPassword;if(typeof callback==="function"){callback(doMatch)}}function showPasswordPopup(){const popup=document.getElementById("passwordPopup");popup.classList.add("visible");popup.style.display="block"}function hidePasswordPopup(){const popup=document.getElementById("passwordPopup");popup.classList.remove("visible");setTimeout(()=>{popup.style.display="none"},300)}function updatePasswordPopup(validationResults,title){const popup=document.getElementById("passwordPopup");popup.innerHTML=`
      <p class="text-center fw-bold mt-3">${title}</p>
      <ul class="list-unstyled">
        ${validationResults.map(result=>`
          <li class="${result.valid?"text-muted":"text-danger"}">
            <i class="${result.valid?"text-success mdi mdi-check-circle":"text-danger mdi mdi-alert-circle"} ms-2"></i>
            ${result.msg}
          </li>
        `).join("")}
      </ul>`}let isPasswordValid=false;let doPasswordsMatch=false;const validateBoth=()=>{if(isPasswordValid&&doPasswordsMatch){if(typeof onValidationSuccess==="function"){onValidationSuccess()}}};if(Object.keys(policy).length===0){console.log("Policy details are empty, unable to validate requirements")}else{if(defaultStyles){injectDefaultStyles()}const popupDiv=document.createElement("div");popupDiv.id="passwordPopup";popupDiv.className="password-popup card p-2 bg-light border border-secondary";passwordContainer.appendChild(popupDiv);const passwordField=passwordContainer.querySelector('input[type="password"]');const verifyPasswordField=verifyPasswordContainer.querySelector('input[type="password"]');passwordField.addEventListener("input",event=>{handlePasswordInput(event,policy,isValid=>{isPasswordValid=isValid;if(typeof onPasswordValid==="function"){onPasswordValid(isValid)}validateBoth()})});verifyPasswordField.addEventListener("input",event=>{handleVerifyPasswordInput(event,doMatch=>{doPasswordsMatch=doMatch;if(typeof onPasswordsMatch==="function"){onPasswordsMatch(doMatch)}validateBoth()})});passwordField.addEventListener("focus",handlePasswordFocus);passwordField.addEventListener("blur",hidePasswordPopup)}}static addFormValidation({formId,invalidFieldBorderColor=null,addRequiredFieldIndicators=true,enablePasswordToggle=true,formType="signOn",passwordPolicy={},verifyPasswordFieldId=null,setFocusOnFirstField=true,title="Password Requirements",defaultStyles=true}){const form=document.getElementById(formId);if(!form){console.error(`Form with ID "${formId}" not found.`);return}if(addRequiredFieldIndicators){DaVinciFormUtils.addRequiredFieldIndicators(formId)}if(setFocusOnFirstField){const firstField=form.querySelector("input, select, textarea");if(firstField){firstField.focus()}}form.setAttribute("novalidate","novalidate");if(enablePasswordToggle){const passwordFields=form.querySelectorAll("input[type='password']");passwordFields.forEach(field=>{const containerId=field.parentNode.id;DaVinciFormUtils.makePasswordToggle(containerId)})}const submitButton=form.querySelector('[type="submit"]');const setValidationMessage=element=>{let message="";if(element.validity.valueMissing){message=element.getAttribute("data-required-message")||"This field is required."}else if(element.validity.typeMismatch){message=element.getAttribute("data-type-mismatch-message")||"Please enter a valid value."}else if(element.validity.patternMismatch){message=element.getAttribute("data-pattern-mismatch-message")||"Please follow the required pattern."}else if(element.validity.tooShort){message=element.getAttribute("data-too-short-message")||`Value is too short. Minimum length is ${element.minLength} characters.`}else if(element.validity.tooLong){message=element.getAttribute("data-too-long-message")||`Value is too long. Maximum length is ${element.maxLength} characters.`}else if(element.type==="email"&&!/^[\w.%+-]+@[\w.-]+\.[a-zA-Z]{2,}$/.test(element.value)){message=element.getAttribute("data-email-invalid-message")||"Please enter a valid email address."}element.setCustomValidity(message);element.setAttribute("data-valid",!message);updateFeedbackElement(element,message);if(invalidFieldBorderColor){element.style.borderColor=message?invalidFieldBorderColor:""}};const updateFeedbackElement=(element,message)=>{const parent=element.parentNode;let feedbackElement=parent.querySelector("div.custom-invalid-feedback");if(!feedbackElement){feedbackElement=document.createElement("div");feedbackElement.classList.add("custom-invalid-feedback","text-danger","mt-1");parent.appendChild(feedbackElement)}feedbackElement.textContent=message;feedbackElement.classList.toggle("show",!!message)};const validateOnChange=element=>{element.addEventListener("input",()=>{if(element.dataset.wasInvalid==="true"||element.dataset.firstBlur==="true"){setValidationMessage(element);element.classList.toggle("custom-invalid",!element.checkValidity())}})};const validateOnBlur=element=>{element.addEventListener("blur",()=>{setValidationMessage(element);element.classList.toggle("custom-invalid",!element.checkValidity());element.dataset.firstBlur="true";element.removeAttribute("data-was-invalid")})};const validateOnFocus=element=>{element.addEventListener("focus",()=>{if(element.dataset.firstBlur==="true"&&!element.checkValidity()){element.dataset.wasInvalid="true"}else{element.removeAttribute("data-was-invalid")}})};const validateForm=event=>{console.log("Validating form");event.preventDefault();let allValid=true;let invalidElements=[];Array.from(form.elements).forEach(element=>{if(element.willValidate){setValidationMessage(element);if(element.checkValidity()){element.classList.remove("custom-invalid")}else{element.classList.add("custom-invalid");invalidElements.push(element);allValid=false}validateOnChange(element);validateOnBlur(element);validateOnFocus(element)}});if(allValid){submitButton.click()}else{if(invalidElements.length>0){invalidElements[0].focus()}}};form.addEventListener("submit",validateForm);Array.from(form.elements).forEach(element=>{if(element.willValidate){validateOnChange(element);validateOnBlur(element);validateOnFocus(element)}});if(formType==="passwordSetting"&&verifyPasswordFieldId){const passwordContainerId=form.querySelector("input[type='password']").parentNode.id;DaVinciFormUtils.activatePasswordValidation({passwordContainerId:passwordContainerId,verifyPasswordContainerId:verifyPasswordFieldId,policy:passwordPolicy,title:title,defaultStyles:defaultStyles,enablePasswordToggle:enablePasswordToggle,onPasswordValid:isValid=>{const passwordField=form.querySelector(`#${passwordContainerId} input[type='password']`);passwordField.setAttribute("data-valid",isValid);if(!isValid){passwordField.classList.add("custom-invalid");updateFeedbackElement(passwordField,"Password does not meet requirements.")}else{passwordField.classList.remove("custom-invalid");updateFeedbackElement(passwordField,"")}},onPasswordsMatch:doMatch=>{const verifyPasswordField=document.getElementById(verifyPasswordFieldId).querySelector("input[type='password']");verifyPasswordField.setAttribute("data-valid",doMatch);if(!doMatch){verifyPasswordField.classList.add("custom-invalid");updateFeedbackElement(verifyPasswordField,"Passwords do not match.")}else{verifyPasswordField.classList.remove("custom-invalid");updateFeedbackElement(verifyPasswordField,"")}},onValidationSuccess:()=>{console.log("Validation successful!")}})}}}